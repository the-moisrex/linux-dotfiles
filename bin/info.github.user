#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Originally from: https://github.com/hippiiee/osgint
# Modified by Moisrex
# Creation date: 25-3-2025

import json
import requests
import binascii
import re
from requests.auth import HTTPBasicAuth
import sys
import base64
import argparse

jsonOutput = {}
output = []
email_out = []
keys = [
    'login', 'id',
    'avatar_url', 'name', 'blog', 'location',
    'twitter_username', 'email', 'company', 'bio',
    'public_gists', 'public_repos',
    'followers', 'following',
    'created_at', 'updated_at'
]
pad = max(len(el) for el in keys)


def findRepos(username):
    users_url = 'https://api.github.com/users/%s/repos?per_page=100&sort=pushed' % username
    response = requests.get(users_url).text
    repos = re.findall(r'"full_name":"%s/(.*?)",.*?"fork":(.*?),' % username, response)
    nonForkedRepos = []
    for repo in repos:
        if repo[1] == 'false':
            nonForkedRepos.append(repo[0])
    return nonForkedRepos


def findEmailFromContributor(username, repo, contributor):
    commits_url = 'https://github.com/%s/%s/commits?author=%s' % (username, repo, contributor)
    commits_filter = r'href="/%s/%s/commit/(.*?)"' % (username, repo)
    response = requests.get(commits_url, auth=HTTPBasicAuth(username, '')).text
    latestCommit = re.search(commits_filter, response)
    if latestCommit:
        latestCommit = latestCommit.group(1)
    else:
        latestCommit = 'dummy'
    patch_url = 'https://github.com/%s/%s/commit/%s.patch' % (username, repo, latestCommit)
    commitDetails = requests.get(patch_url, auth=HTTPBasicAuth(username, '')).text
    email = re.search(r'<(.*)>', commitDetails)
    if email:
        email = email.group(1)
        email_out.append(email)


def findEmailFromUsername(username):
    repos = findRepos(username)
    for repo in repos:
        findEmailFromContributor(username, repo, username)


def findPublicKeysFromUsername(username):
    gpg_response = requests.get(f'https://github.com/{username}.gpg').text
    ssh_response = requests.get(f'https://github.com/{username}.keys').text
    if "hasn't uploaded any GPG keys" not in gpg_response:
        output.append(f'[+] {'GPG_keys':>{pad}}: https://github.com/{username}.gpg')
        jsonOutput['GPG_keys'] = f'https://github.com/{username}.gpg'

        # extract email from gpg key
        regex_pgp = re.compile(r"-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----", re.MULTILINE)
        matches = regex_pgp.findall(gpg_response)
        if matches:

            # Base64 decode the signature block
            b64 = base64.b64decode(matches[0])

            # Convert the base64 to hex
            hx = binascii.hexlify(b64)

            # Get the offsets for the Key ID
            keyid = hx.decode()[48:64]
            output.append(f'[+] {'GPG_key_id':>{pad}}: {keyid}')
            jsonOutput['GPG_key_id'] = keyid

            # find email adress
            emails = re.findall(r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+", b64.decode('Latin-1'))
            if emails:
                for email in emails:
                    email_out.append(email)
    if ssh_response:
        output.append(f'[+] {'SSH_keys':>{pad}}: https:/github.com/{username}.keys')
        jsonOutput['SSH_keys'] = f'https://github.com/{username}.keys'


def findInfoFromUsername(username):
    users_url = f'https://api.github.com/users/{username}'
    response = requests.get(users_url)
    if response.status_code == 200 and requests.codes.ok:
        data = response.json()
        for i in data:
            if i in keys:
                if data[i] is not None and data[i] != '':
                    if i == 'email':
                        email_out.append(data[i])
                    jsonOutput[i] = data[i]
                    output.append(f'[+] {i:>{pad}}: {data[i]}')
        jsonOutput['public_gists'] = f'https://gist.github.com/{username}'
        output.append(f'[+] {'public_gists':>{pad}}: https://gist.github.com/{username}')
        return True
    elif response.status_code == 404:
        jsonOutput['error'] = 'username does not exist'
        return False


def findUsernameFromEmail(email):
    emails_url = 'https://api.github.com/search/users?q=%s' % email
    response = requests.get(emails_url).text
    username = re.findall(r'"login":"(.*?)"', response)
    if username:
        output.append(f'[+] {'username':>{pad}}: {username[0]}')
        jsonOutput['username'] = username[0]
    else:
        output.append(f'[-] {'username':>{pad}}: Not found')
        jsonOutput['username'] = 'Not found'


def parse_args():
    parser = argparse.ArgumentParser(
        prog=sys.argv[0],
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument("-u", "--username", default=None, help="Github username")
    parser.add_argument("-e", "--email", default=None, help="Associated Email of the wanted username")
    parser.add_argument("--json", default=False, action="store_true", help="Use JSON as output")
    args = parser.parse_args()
    return args


if __name__ == '__main__':
    args = parse_args()
    if args.username:
        username_exists = findInfoFromUsername(args.username)
        if username_exists:
            findEmailFromUsername(args.username)
            findPublicKeysFromUsername(args.username)
            if args.json:
                jsonOutput['email'] = list(set(email_out))
                print(json.dumps(jsonOutput, sort_keys=True, indent=4))
            else:
                for data in output:
                    print(data)
                if email_out != []:
                    print(f'[+] {'email':>{pad}}:', end='')
                    for email in list(set(email_out)):
                        print(f' {email}', end='')
                print()  # empty line
        else:
            if args.json:
                print(json.dumps(jsonOutput, sort_keys=True, indent=4))
            else:
                print('Username does not exist')
    elif args.email:
        findUsernameFromEmail(args.email)
        if args.json:
            print(json.dumps(jsonOutput, sort_keys=True, indent=4))
        else:
            for data in output:
                print(data)
    else:
        print(f'Help: {sys.argv[0].split('/')[-1]} --help')
        sys.exit(1)
