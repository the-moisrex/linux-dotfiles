#!/usr/bin/env bash
# Subtitle extractor script
# Supports: embedded subtitles, online subtitles via yt-dlp (YouTube, Twitter, Rumble, etc.)
# Features:
# - Auto mode: try embedded first, fallback to online
# - Explicit source selection: embedded, online, auto
# - Flexible language matching: en, eng, English, es, spa, Spanish, etc.
# - Output to stdout or a file
# - Verbose mode

set -euo pipefail

# Script path info
curfile=$(basename "$0")
curdir=$(realpath "$(dirname "$0")")

# Defaults
LANG="eng"
FORMAT="srt"
OUTPUT="-"
VERBOSE=0
SOURCE="auto"  # embedded, online, auto

# Language mappings
# -------------------------------
# Language mappings (user input → canonical code)
# -------------------------------
declare -A LANG_MAP=(
    ["ab"]="ab" ["aa"]="aa" ["af"]="af" ["ak"]="ak" ["sq"]="sq" ["am"]="am" ["ar"]="ar"
    ["hy"]="hy" ["as"]="as" ["ay"]="ay" ["az"]="az" ["bn"]="bn" ["ba"]="ba" ["eu"]="eu"
    ["be"]="be" ["bho"]="bho" ["bs"]="bs" ["br"]="br" ["bg"]="bg" ["my"]="my" ["ca"]="ca"
    ["ceb"]="ceb" ["zh-Hans"]="zh-Hans" ["zh-hans"]="zh-Hans" ["zh"]="zh-Hans" ["zh-Hant"]="zh-Hant"
    ["zh-hant"]="zh-Hant" ["co"]="co" ["hr"]="hr" ["cs"]="cs" ["da"]="da" ["dv"]="dv"
    ["nl"]="nl" ["dz"]="dz" ["en-orig"]="en" ["en"]="en" ["eo"]="eo" ["et"]="et" ["ee"]="ee"
    ["fo"]="fo" ["fj"]="fj" ["fil"]="fil" ["fi"]="fi" ["fr"]="fra" ["gaa"]="gaa" ["gl"]="gl"
    ["lg"]="lg" ["ka"]="ka" ["de"]="ger" ["el"]="el" ["gn"]="gn" ["gu"]="gu" ["ht"]="ht"
    ["ha"]="ha" ["haw"]="haw" ["iw"]="iw" ["he"]="iw" ["hi"]="hi" ["hmn"]="hmn" ["hu"]="hu"
    ["is"]="is" ["ig"]="ig" ["id"]="id" ["iu"]="iu" ["ga"]="ga" ["it"]="it" ["ja"]="ja"
    ["jv"]="jv" ["kl"]="kl" ["kn"]="kn" ["kk"]="kk" ["kha"]="kha" ["km"]="km" ["rw"]="rw"
    ["ko"]="ko" ["kri"]="kri" ["ku"]="ku" ["ky"]="ky" ["lo"]="lo" ["la"]="la" ["lv"]="lv"
    ["ln"]="ln" ["lt"]="lt" ["lua"]="lua" ["luo"]="luo" ["lb"]="lb" ["mk"]="mk" ["mg"]="mg"
    ["ms"]="ms" ["ml"]="ml" ["mt"]="mt" ["gv"]="gv" ["mi"]="mi" ["mr"]="mr" ["mn"]="mn"
    ["mfe"]="mfe" ["ne"]="ne" ["new"]="new" ["nso"]="nso" ["no"]="no" ["ny"]="ny" ["oc"]="oc"
    ["or"]="or" ["om"]="om" ["os"]="os" ["pam"]="pam" ["ps"]="ps" ["fa"]="fas" ["pl"]="pl"
    ["pt"]="pt" ["pt-PT"]="pt-PT" ["pa"]="pa" ["qu"]="qu" ["ro"]="ro" ["rn"]="rn" ["ru"]="ru"
    ["sm"]="sm" ["sg"]="sg" ["sa"]="sa" ["gd"]="gd" ["sr"]="sr" ["crs"]="crs" ["sn"]="sn"
    ["sd"]="sd" ["si"]="si" ["sk"]="sk" ["sl"]="sl" ["so"]="so" ["st"]="st" ["es"]="spa"
    ["su"]="su" ["sw"]="sw" ["ss"]="ss" ["sv"]="sv" ["tg"]="tg" ["ta"]="ta" ["tt"]="tt"
    ["te"]="te" ["th"]="th" ["bo"]="bo" ["ti"]="ti" ["to"]="to" ["ts"]="ts" ["tn"]="tn"
    ["tum"]="tum" ["tr"]="tr" ["tk"]="tk" ["uk"]="uk" ["ur"]="ur" ["ug"]="ug" ["uz"]="uz"
    ["ve"]="ve" ["vi"]="vi" ["war"]="war" ["cy"]="cy" ["fy"]="fy" ["wo"]="wo" ["xh"]="xh"
    ["yi"]="yi" ["yo"]="yo" ["zu"]="zu"
)

# -------------------------------
# Aliases for ffmpeg/ffprobe stream matching
# -------------------------------
declare -A LANG_ALIASES=(
    ["eng"]="en eng english"
    ["spa"]="es spa spanish"
    ["fas"]="fa fas farsi persian"
    ["fra"]="fr fra french"
    ["ger"]="de ger german"
    ["zh-Hans"]="zh zh-Hans chinese chinese-simplified"
    ["zh-Hant"]="zh-Hant chinese-traditional"
    ["ab"]="ab"
    ["aa"]="aa"
    ["af"]="af"
    ["ak"]="ak"
    ["sq"]="sq"
    ["am"]="am"
    ["ar"]="ar"
    ["hy"]="hy"
    ["as"]="as"
    ["ay"]="ay"
    ["az"]="az"
    ["bn"]="bn"
    ["ba"]="ba"
    ["eu"]="eu"
    ["be"]="be"
    ["bho"]="bho"
    ["bs"]="bs"
    ["br"]="br"
    ["bg"]="bg"
    ["my"]="my"
    ["ca"]="ca"
    ["ceb"]="ceb"
    ["co"]="co"
    ["hr"]="hr"
    ["cs"]="cs"
    ["da"]="da"
    ["dv"]="dv"
    ["nl"]="nl"
    ["dz"]="dz"
    ["en-orig"]="en en-orig english"
    ["eo"]="eo"
    ["et"]="et"
    ["ee"]="ee"
    ["fo"]="fo"
    ["fj"]="fj"
    ["fil"]="fil filipino"
    ["fi"]="fi"
    ["gaa"]="gaa"
    ["gl"]="gl"
    ["lg"]="lg"
    ["ka"]="ka"
    ["el"]="el greek"
    ["gn"]="gn"
    ["gu"]="gu"
    ["ht"]="ht"
    ["ha"]="ha"
    ["haw"]="haw"
    ["iw"]="iw hebrew"
    ["he"]="iw hebrew"
    ["hi"]="hi hindi"
    ["hmn"]="hmn"
    ["hu"]="hu"
    ["is"]="is"
    ["ig"]="ig"
    ["id"]="id indonesian"
    ["iu"]="iu"
    ["ga"]="ga irish"
    ["it"]="it italian"
    ["ja"]="ja japanese"
    ["jv"]="jv"
    ["kl"]="kl"
    ["kn"]="kn"
    ["kk"]="kk"
    ["kha"]="kha"
    ["km"]="km"
    ["rw"]="rw"
    ["ko"]="ko korean"
    ["kri"]="kri"
    ["ku"]="ku"
    ["ky"]="ky"
    ["lo"]="lo"
    ["la"]="la latin"
    ["lv"]="lv"
    ["ln"]="ln"
    ["lt"]="lt"
    ["lua"]="lua"
    ["luo"]="luo"
    ["lb"]="lb"
    ["mk"]="mk"
    ["mg"]="mg"
    ["ms"]="ms"
    ["ml"]="ml"
    ["mt"]="mt"
    ["gv"]="gv"
    ["mi"]="mi maori"
    ["mr"]="mr"
    ["mn"]="mn"
    ["mfe"]="mfe"
    ["ne"]="ne"
    ["new"]="new"
    ["nso"]="nso"
    ["no"]="no norwegian"
    ["ny"]="ny"
    ["oc"]="oc"
    ["or"]="or"
    ["om"]="om"
    ["os"]="os"
    ["pam"]="pam"
    ["ps"]="ps"
    ["pl"]="pl"
    ["pt"]="pt portuguese"
    ["pt-PT"]="pt-PT portuguese-portugal"
    ["pa"]="pa punjabi"
    ["qu"]="qu"
    ["ro"]="ro"
    ["rn"]="rn"
    ["ru"]="ru russian"
    ["sm"]="sm"
    ["sg"]="sg"
    ["sa"]="sa"
    ["gd"]="gd"
    ["sr"]="sr"
    ["crs"]="crs"
    ["sn"]="sn"
    ["sd"]="sd"
    ["si"]="si"
    ["sk"]="sk"
    ["sl"]="sl"
    ["so"]="so"
    ["st"]="st"
    ["su"]="su"
    ["sw"]="sw"
    ["ss"]="ss"
    ["sv"]="sv"
    ["tg"]="tg"
    ["ta"]="ta"
    ["tt"]="tt"
    ["te"]="te"
    ["th"]="th"
    ["bo"]="bo"
    ["ti"]="ti"
    ["to"]="to"
    ["ts"]="ts"
    ["tn"]="tn"
    ["tum"]="tum"
    ["tr"]="tr"
    ["tk"]="tk"
    ["uk"]="uk"
    ["ur"]="ur"
    ["ug"]="ug"
    ["uz"]="uz"
    ["ve"]="ve"
    ["vi"]="vi"
    ["war"]="war"
    ["cy"]="cy"
    ["fy"]="fy"
    ["wo"]="wo"
    ["xh"]="xh"
    ["yi"]="yi"
    ["yo"]="yo"
    ["zu"]="zu"
)

# -------------------------------
# yt-dlp language codes (canonical → yt-dlp expected)
# -------------------------------
declare -A YT_LANG_MAP=(
    ["eng"]="en"
    ["spa"]="es"
    ["fas"]="fa"
    ["fra"]="fr"
    ["ger"]="de"
    ["zh-Hans"]="zh-CN"
    ["zh-Hant"]="zh-TW"
    ["ab"]="ab"
    ["aa"]="aa"
    ["af"]="af"
    ["ak"]="ak"
    ["sq"]="sq"
    ["am"]="am"
    ["ar"]="ar"
    ["hy"]="hy"
    ["as"]="as"
    ["ay"]="ay"
    ["az"]="az"
    ["bn"]="bn"
    ["ba"]="ba"
    ["eu"]="eu"
    ["be"]="be"
    ["bho"]="bho"
    ["bs"]="bs"
    ["br"]="br"
    ["bg"]="bg"
    ["my"]="my"
    ["ca"]="ca"
    ["ceb"]="ceb"
    ["co"]="co"
    ["hr"]="hr"
    ["cs"]="cs"
    ["da"]="da"
    ["dv"]="dv"
    ["nl"]="nl"
    ["dz"]="dz"
    ["en-orig"]="en"
    ["eo"]="eo"
    ["et"]="et"
    ["ee"]="ee"
    ["fo"]="fo"
    ["fj"]="fj"
    ["fil"]="fil"
    ["fi"]="fi"
    ["gaa"]="gaa"
    ["gl"]="gl"
    ["lg"]="lg"
    ["ka"]="ka"
    ["el"]="el"
    ["gn"]="gn"
    ["gu"]="gu"
    ["ht"]="ht"
    ["ha"]="ha"
    ["haw"]="haw"
    ["iw"]="he"
    ["hi"]="hi"
    ["hmn"]="hmn"
    ["hu"]="hu"
    ["is"]="is"
    ["ig"]="ig"
    ["id"]="id"
    ["iu"]="iu"
    ["ga"]="ga"
    ["it"]="it"
    ["ja"]="ja"
    ["jv"]="jv"
    ["kl"]="kl"
    ["kn"]="kn"
    ["kk"]="kk"
    ["kha"]="kha"
    ["km"]="km"
    ["rw"]="rw"
    ["ko"]="ko"
    ["kri"]="kri"
    ["ku"]="ku"
    ["ky"]="ky"
    ["lo"]="lo"
    ["la"]="la"
    ["lv"]="lv"
    ["ln"]="ln"
    ["lt"]="lt"
    ["lua"]="lua"
    ["luo"]="luo"
    ["lb"]="lb"
    ["mk"]="mk"
    ["mg"]="mg"
    ["ms"]="ms"
    ["ml"]="ml"
    ["mt"]="mt"
    ["gv"]="gv"
    ["mi"]="mi"
    ["mr"]="mr"
    ["mn"]="mn"
    ["mfe"]="mfe"
    ["ne"]="ne"
    ["new"]="new"
    ["nso"]="nso"
    ["no"]="no"
    ["ny"]="ny"
    ["oc"]="oc"
    ["or"]="or"
    ["om"]="om"
    ["os"]="os"
    ["pam"]="pam"
    ["ps"]="ps"
    ["pl"]="pl"
    ["pt"]="pt"
    ["pt-PT"]="pt-PT"
    ["pa"]="pa"
    ["qu"]="qu"
    ["ro"]="ro"
    ["rn"]="rn"
    ["ru"]="ru"
    ["sm"]="sm"
    ["sg"]="sg"
    ["sa"]="sa"
    ["gd"]="gd"
    ["sr"]="sr"
    ["crs"]="crs"
    ["sn"]="sn"
    ["sd"]="sd"
    ["si"]="si"
    ["sk"]="sk"
    ["sl"]="sl"
    ["so"]="so"
    ["st"]="st"
    ["su"]="su"
    ["sw"]="sw"
    ["ss"]="ss"
    ["sv"]="sv"
    ["tg"]="tg"
    ["ta"]="ta"
    ["tt"]="tt"
    ["te"]="te"
    ["th"]="th"
    ["bo"]="bo"
    ["ti"]="ti"
    ["to"]="to"
    ["ts"]="ts"
    ["tn"]="tn"
    ["tum"]="tum"
    ["tr"]="tr"
    ["tk"]="tk"
    ["uk"]="uk"
    ["ur"]="ur"
    ["ug"]="ug"
    ["uz"]="uz"
    ["ve"]="ve"
    ["vi"]="vi"
    ["war"]="war"
    ["cy"]="cy"
    ["fy"]="fy"
    ["wo"]="wo"
    ["xh"]="xh"
    ["yi"]="yi"
    ["yo"]="yo"
    ["zu"]="zu"
)



# -------------------------------
# Usage / help function
# -------------------------------
usage() {
    cat <<EOF
Usage: $curfile [options] <file_or_url>...

Options:
  -l, --lang <code>       Subtitle language (default: en, e.g., en, eng, English)
  -f, --format <fmt>      Subtitle format (default: srt)
  -o, --output <file>     Output file (default: stdout)
  -v, --verbose           Enable verbose output
  -s, --source <src>      Subtitle source: embedded, online, auto (default: auto)
  -h, --help              Show this help message

Examples:
  $curfile video.mp4
  $curfile -l es -f vtt -o subs.vtt https://youtube.com/watch?v=xyz
  $curfile myfile.mp4 -s auto
EOF
    exit 0
}

# -------------------------------
# Logging helper
# -------------------------------
log() { [[ $VERBOSE -eq 1 ]] && echo "[INFO] $*" >&2; }

# -------------------------------
# Normalize language codes
# -------------------------------
normalize_lang() {
    local input_lang="${1,,}"
    echo "${LANG_MAP[$input_lang]:-$input_lang}"
}

# Generate aliases for matching streams
get_lang_aliases() {
    local lang="$1"
    echo "${LANG_ALIASES[$lang]:-$lang}"
}

# Convert language code for yt-dlp
to_yt_lang() {
    echo "${YT_LANG_MAP[$1]:-$1}"
}

# -------------------------------
# Argument parsing
# -------------------------------
ARGS=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        -l|--lang) LANG=$(normalize_lang "$2"); shift 2 ;;
        -f|--format) FORMAT="$2"; shift 2 ;;
        -o|--output) OUTPUT="$2"; shift 2 ;;
        -v|--verbose) VERBOSE=1; shift ;;
        -s|--source) SOURCE="$2"; shift 2 ;;
        -h|--help) usage ;;
        -*)
            echo "Unknown option: $1" >&2
            usage
        ;;
        *) ARGS+=("$1"); shift ;;
    esac
done

[[ ${#ARGS[@]} -eq 0 ]] && { echo "Error: no input files or URLs specified" >&2; usage; }

# -------------------------------
# Extract embedded subtitles
# -------------------------------
extract_embedded_subs() {
    local file="$1"
    log "Checking embedded subtitles for $file (lang=$LANG)..."
    
    # Get subtitle stream indices matching language aliases
    local aliases=($(get_lang_aliases "$LANG"))
    local index
    index=$(ffprobe -v error -select_streams s \
        -show_entries stream=index:stream_tags=language \
        -of json "$file" | jq -r --argjson aliases "$(printf '["%s"]' "${aliases[*]}" | sed 's/ /","/g')" '
    .streams[] | select( .tags.language | ascii_downcase as $t | $aliases[] | test($t; "i") ) | .index' | head -n1)
    
    if [[ -n "$index" ]]; then
        log "Found embedded subtitles (stream index $index), extracting..."
        
        # Get the subtitle stream index among all subtitle streams
        local subtitle_index=$(ffprobe -v error -select_streams s -show_entries stream=index -of csv=p=0 "$file" | \
        tr ',' '\n' | grep -n "^$index$" | cut -d: -f1)
        subtitle_index=$((subtitle_index - 1))  # Convert to 0-based index
        
        log "Using subtitle stream index: $subtitle_index (absolute index: $index)"
        
        # Always use a temporary file with proper extension
        local tmpfile=$(mktemp --suffix=".$FORMAT")
        
        # Extract to temporary file
        ffmpeg -hide_banner -loglevel error -y -i "$file" -map 0:s:$subtitle_index "$tmpfile"
        
        # Handle output
        if [[ "$OUTPUT" == "-" ]]; then
            # Output to stdout
            cat "$tmpfile"
        else
            # Move to final destination
            mv "$tmpfile" "$OUTPUT"
            log "Subtitles saved to: $OUTPUT"
        fi
        
        # Clean up
        rm -f "$tmpfile"
        return 0
    else
        log "No embedded subtitles found for $LANG."
        return 1
    fi
}

# -------------------------------
# Get subtitles from online URL
# -------------------------------
get_subs_from_url() {
    local url="$1"
    log "Downloading subtitles from URL: $url"
    
    local tmpdir=$(mktemp -d)
    local yt_lang=$(to_yt_lang "$LANG")
    local opts=(--skip-download --sub-lang "$yt_lang-orig,$yt_lang" --write-auto-sub --convert-subs "$FORMAT" --sub-format "$FORMAT")
    opts+=(-o "$tmpdir/subtitles.%(ext)s" "$url")
    
    # echo "${opts[@]}";
    
    
    if [[ $VERBOSE -eq 0 ]]; then
        # Download to temporary directory
        if ! yt-dlp "${opts[@]}" >/dev/null 2>&1; then
            log "Failed to download subtitles from URL: $url"
            rm -rf "$tmpdir"
            return 1
        fi
    else
        # Download to temporary directory
        if ! yt-dlp "${opts[@]}"; then
            log "Failed to download subtitles from URL: $url"
            rm -rf "$tmpdir"
            return 1
        fi
    fi
    
    
    # Find the downloaded subtitle file
    local subfile=$(find "$tmpdir" -name "*.${FORMAT}" | head -n1)
    
    if [[ -f "$subfile" ]]; then
        if [[ "$OUTPUT" == "-" ]]; then
            # Output to stdout
            cat "$subfile"
        else
            # Move to final destination
            mv "$subfile" "$OUTPUT"
            log "Subtitles saved to: $OUTPUT"
        fi
    else
        log "No subtitles found for language: $yt_lang"
        rm -rf "$tmpdir"
        return 1
    fi
    
    # Clean up
    rm -rf "$tmpdir"
    return 0
}

# -------------------------------
# Main processing loop
# -------------------------------
for item in "${ARGS[@]}"; do
    if [[ "$item" =~ ^https?:// ]]; then
        # URL case
        [[ "$SOURCE" == "embedded" ]] && { log "Skipping URL $item because source=embedded"; continue; }
        if ! get_subs_from_url "$item"; then
            echo "Error: Failed to extract subtitles from URL: $item" >&2
            exit 1
        fi
        elif [[ -f "$item" ]]; then
        found_embedded=0
        if [[ "$SOURCE" == "embedded" || "$SOURCE" == "auto" ]]; then
            if extract_embedded_subs "$item"; then
                found_embedded=1
            fi
        fi
        
        # Online fallback
        if [[ "$SOURCE" == "online" || ( "$SOURCE" == "auto" && "$found_embedded" -eq 0 ) ]]; then
            if [[ -x "$curdir/yt.links" ]]; then
                log "Trying yt.links for $item..."
                url=$("$curdir/yt.links" "$item" || true)
                if [[ -n "$url" ]]; then
                    if ! get_subs_from_url "$url"; then
                        echo "Error: Failed to extract subtitles from URL: $url" >&2
                        exit 1
                    fi
                else
                    log "No URL found via yt.links for $item"
                fi
            else
                log "yt.links not found or not executable in $curdir."
            fi
        fi
    else
        log "Skipping invalid input: $item"
    fi
done