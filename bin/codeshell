#!/usr/bin/bash


detect_distro() {
    if [[ "$OSTYPE" == linux-android* ]]; then
        distro="termux"
    fi

    if [ -z "$distro" ]; then
        distro=$(ls /etc | awk 'match($0, "(.+?)[-_](?:release|version)", groups) {if(groups[1] != "os") {print groups[1]}}')
    fi

    if [ -z "$distro" ]; then
        if [ -f "/etc/os-release" ]; then
            distro="$(source /etc/os-release && echo $ID)"
        elif [ "$OSTYPE" == "darwin" ]; then
            distro="darwin"
        else 
            distro="invalid"
        fi
    fi
}


detect_distro

main="left"
side="right"

echo Distro: $distro
if [[ "$distro" == "termux" ]]; then
  main="top"
  side="bottom"
fi

tmpdir=""
template=""
buildsys="Ninja"

for i in "$@"; do
  case $i in
      -t=*|--template=*)
        template="${i#*=}"
        shift # past argument=value
        ;;

      -n=*|--name=*)
        dir="${i#*=}"
        mkdir -p ~/codeshells/$dir
        tmpdir=~/codeshells/$dir
        shift
        ;;

      -h|--help)
        echo "-n=*|--name=* \t\t the name of the project"
        echo "-t=*|--template \t\t the template to use"
        echo "-g=*|-G=* \t\t the build system to use in cmake"
        exit;
        ;;

      -g=*|-G=*)
        buildsys="${i#*=}"
        ;;

      *)
        # nothing to do
        ;;
  esac
done

# if there's no tempalte and no name
if [ -z "${template}" ] && [ ! -z "${tmpdir}" ]; then
  if [ -s "${tmpdir}/.template" ]; then
    template=$(cat "${tmpdir}/.template")
  fi
fi

if [ -z "$template" ]; then
  template="simple"
fi

if [ -z "$tmpdir" ]; then
	tmpdir=$(mktemp -d --suffix=-codeshell)
fi;

tmpdir=$(realpath ${tmpdir});

if [ -z "$EDITOR" ]; then
	EDITOR="nvim";
fi;

template_dir="$(dirname $0)/../code-templates/${template}"

if [ ! -d $template_dir ]; then
	echo "The specified template ($template) does not exists. Possible code-templates are:"
    dir="$(dirname $0)/../code-templates";
    echo "Directory: $dir"
    ls "$dir"
	exit;
fi;

if [ -z "$TMUX" ]; then
  window="code-$((1 + RANDOM % 10000000))"
  tmux new -s ${window} -d -c "${tmpdir}"
else
  window=$(tmux display-message -p "#S")
fi

if [[ "$main" == "left" ]]; then
  tmux split-window -t ${window} -h
else
  tmux split-window -t ${window}
fi
tmux select-pane -t ${window}.${side}
tmux resize-pane -t ${window}.${side} -R 18
tmux send-keys -t ${window}.${main} "cd ${tmpdir}" C-m
tmux send-keys -t ${window}.${side} "cd ${tmpdir}" C-m


# copy files if the directory does not exists
if [ `ls -A ${tmpdir} | wc -m` == "0" ]; then
	cp -nTr "$template_dir" "${tmpdir}"
fi;

# write config files:
echo "${template}" > "${tmpdir}/.template";

function open_editor() {
	local file="$1";
	local manifest_file="$2";
	local nonblocking=""
  local kill_window=0;
	if [ "$EDITOR" == "qtcreator" ]; then
		nonblocking="setsid"
		file=$manifest_file;
  elif [ "$EDITOR" == "clion" ]; then
    file="${tmpdir}";
    kill_window=1;
  fi
  tmux send-keys -t ${window}.${main} "${nonblocking} ${EDITOR} ${file}" C-m
  if [ $kill_window == 1 ]; then
    tmux send-keys -t ${window}.${main} "tmux kill-window" C-m;
  fi
}

echo "Editor: ${EDITOR}"
echo "Template: ${template}"
echo "Template directory: ${template_dir}"
echo "Code directory: ${tmpdir}"

# run build commands
if [ -f "${template_dir}/.start" ]; then
  main_file=$(cat "${template_dir}/.start")
  if [ -f "${template_dir}/.watch" ]; then
    tmux send-keys -t ${window}.${side} "/bin/bash ${tmpdir}/.watch" C-m
  fi
  open_editor "$main_file" "$main_file";
elif [[ "$template" == asm* ]]; then # make
	tmux send-keys -t ${window}.${side} "find . -name '*.asm' | entr -cs 'make -j10 && ./a.out'" C-m
	open_editor "main.asm" "main.asm";
elif [ -f ${template_dir}/main.lua ]; then # make
  tmux send-keys -t ${window}.${side} "find . -name '*.lua' | entr -cs 'lua main.lua'" C-m
  open_editor "main.lua" "main.lua";
elif [ -f ${template_dir}/package.json ]; then # make
  tmux send-keys -t ${window}.${side} "find . -name '*.js' -or -name '*.json' | entr -cs 'make && npm start'" C-m
  open_editor "index.js" "index.js";
elif [ -f ${template_dir}/Makefile ]; then # make
  if [ -f ${template_dir}/main.c ]; then
  	tmux send-keys -t ${window}.${side} "find . -name '*.c' -or -name '*.h' -or -name 'Makefile' | entr -cs 'make -j10 && ./a.out'" C-m
	open_editor "main.c" "main.c";
  else
  	tmux send-keys -t ${window}.${side} "find . -name '*.cpp' -or -name '*.h' -or -name '*.hpp' -or -name 'Makefile' | entr -cs 'make -j10 && ./a.out'" C-m
	open_editor "main.cpp" "main.cpp";
  fi;
elif [ -f ${template_dir}/CMakeLists.txt ]; then # CMake
  buildsyscmd="ninja";
  if [ "${buildsys}" == "Ninja" ]; then
    buildsyscmd="ninja"
  elif [ "${buildsys}" == "Unix Makefiles" ]; then
    buildsyscmd="make -j10"
  fi

  echo "Build system generator: cmake"
  echo "Build system: ${buildsys}"
  echo "Build system command: ${buildsyscmd}"

	tmux send-keys -t ${window}.${side} "mkdir -p \"${tmpdir}/build\"" C-m
  tmux send-keys -t ${window}.${side} "cd build/" C-m;
	tmux send-keys -t ${window}.${main} "cmake -G \"${buildsys}\" -B${tmpdir}/build -S${tmpdir}" C-m
	tmux send-keys -t ${window}.${side} "find .. -name '*.cpp' -or -name '*.h' -or -name '*.hpp' -or -name 'CMakeLists.txt' | entr -cs '${buildsyscmd} && ./a.out'" C-m
	open_editor "main.cpp" "CMakeLists.txt";
elif [ -f ${template_dir}/main.py ]; then # Python
        chmod +x ${tmpdir}/main.py
	tmux send-keys -t ${window}.${side} "find . -name 'main.py' | entr -cs '${tmpdir}/main.py'" C-m
	open_editor "main.py" "main.py";
elif [ -f ${template_dir}/main.sh ]; then # Bash
        chmod +x ${tmpdir}/main.sh
	tmux send-keys -t ${window}.${side} "find . -name 'main.sh' | entr -cs '${tmpdir}/main.sh'" C-m
	open_editor "main.sh" "main.sh";
elif [ -f ${template_dir}/Cargo.toml ]; then # Rust
	tmux send-keys -t ${window}.${side} "find . -name '*.rs' | entr -cs 'cd ${tmpdir} && cargo build && cargo run'" C-m
	open_editor "src/main.rs" "Cargo.toml";
fi;

# tmux split-pane -t ${window}.${side} -v
# tmux send-keys -t ${window}.bottom-right "cd ${tmpdir}" C-m
# tmux send-keys -t ${window}.bottom-right "find ${tmpdir} -name \"*.s\" | entr -cs \"clear; cat ${tmpdir}/main.s\"" C-m


tmux select-pane -t ${window}.${main}

if [ -z "$TMUX" ]; then
  tmux attach -t ${window}
fi


