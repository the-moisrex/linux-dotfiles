#!/usr/bin/bash

tmpdir=""
template=""
buildsys="Ninja"

for i in "$@"
do
case $i in
    -t=*|--template=*)
 	template="${i#*=}"
	shift # past argument=value
    ;;

    -n=*|--name=*)
	dir="${i#*=}"
 	mkdir -p ~/codeshells/$dir
	tmpdir=~/codeshells/$dir
	shift
    ;;

    -h|--help)
	echo "-n=*|--name=* \t\t the name of the project"
	echo "-t=*|--template \t\t the template to use"
	echo "-g=*|-G=* \t\t the build system to use in cmake"
	exit;
    ;;

    -g=*|-G=*)
  buildsys="${i#*=}"
    ;;

    *)
	    # nothing to do
    ;;
esac
done

# if there's no tempalte and no name
if [ -z "${template}" ] && [ ! -z "${tmpdir}" ]; then
  if [ -s "${tmpdir}/.template" ]; then
    template=$(cat "${tmpdir}/.template")
  fi
fi

if [ -z "$template" ]; then
  template="simple"
fi

if [ -z "$tmpdir" ]; then
	tmpdir=$(mktemp -d --suffix=-codeshell)
fi;

tmpdir=$(realpath ${tmpdir});

if [ -z "$EDITOR" ]; then
	EDITOR="nvim";
fi;

template_dir="$(dirname $0)/../code-templates/${template}"

if [ ! -d $template_dir ]; then
	echo "The specified template ($template) does not exists."
	exit;
fi;

if [ -z "$TMUX" ]; then
  window="code-$((1 + RANDOM % 10000000))"
  tmux new -s ${window} -d -c "${tmpdir}"
else
  window=$(tmux display-message -p "#S")
fi
tmux split-window -t ${window} -h
tmux select-pane -t ${window}.right
tmux resize-pane -t ${window}.right -R 18
tmux send-keys -t ${window}.left "cd ${tmpdir}" C-m
tmux send-keys -t ${window}.right "cd ${tmpdir}" C-m


# copy files if the directory does not exists
if [ `ls -A ${tmpdir} | wc -m` == "0" ]; then
	cp -nr $template_dir/* ${tmpdir}/.
fi;

# write config files:
echo "${template}" > "${tmpdir}/.template";

function open_editor() {
	local file="$1";
	local manifest_file="$2";
	local nonblocking=""
	if [ "$EDITOR" == "qtcreator" ]; then
		nonblocking="setsid"
		file=$manifest_file;
	fi
  tmux send-keys -t ${window}.left "${nonblocking} ${EDITOR} ${file}" C-m
}

echo "Editor: ${EDITOR}"
echo "Template: ${template}"
echo "Template directory: ${template_dir}"
echo "Code directory: ${tmpdir}"

# run build commands
if [[ "$template" == asm* ]]; then # make
	tmux send-keys -t ${window}.right "find . -name '*.asm' | entr -cs 'make -j10 && ./a.out'" C-m
	open_editor "main.asm" "main.asm";
elif [ -f ${template_dir}/Makefile ]; then # make
  if [ -f ${template_dir}/main.c ]; then
  	tmux send-keys -t ${window}.right "find . -name '*.c' -or -name '*.h' -or -name 'Makefile' | entr -cs 'make -j10 && ./a.out'" C-m
	  open_editor "main.c" "main.c";
  else
  	tmux send-keys -t ${window}.right "find . -name '*.cpp' -or -name '*.h' -or -name '*.hpp' -or -name 'Makefile' | entr -cs 'make -j10 && ./a.out'" C-m
	  open_editor "main.cpp" "main.cpp";
  fi;
elif [ -f ${template_dir}/CMakeLists.txt ]; then # CMake
  buildsyscmd="ninja";
  if [ "${buildsys}" == "Ninja" ]; then
    buildsyscmd="ninja"
  elif [ "${buildsys}" == "Unix Makefiles" ]; then
    buildsyscmd="make -j10"
  fi

  echo "Build system generator: cmake"
  echo "Build system: ${buildsys}"
  echo "Build system command: ${buildsyscmd}"

	tmux send-keys -t ${window}.right "mkdir -p \"${tmpdir}/build\"" C-m
  tmux send-keys -t ${window}.right "cd build/" C-m;
	tmux send-keys -t ${window}.left "cmake -G \"${buildsys}\" -B${tmpdir}/build -S${tmpdir}" C-m
	tmux send-keys -t ${window}.right "find .. -name '*.cpp' -or -name '*.h' -or -name '*.hpp' -or -name 'CMakeLists.txt' | entr -cs '${buildsyscmd} && ./a.out'" C-m
	open_editor "main.cpp" "CMakeLists.txt";
elif [ -f ${template_dir}/main.py ]; then # Python
        chmod +x ${tmpdir}/main.py
	tmux send-keys -t ${window}.right "find . -name 'main.py' | entr -cs '${tmpdir}/main.py'" C-m
	open_editor "main.py" "main.py";
elif [ -f ${template_dir}/main.sh ]; then # Bash
        chmod +x ${tmpdir}/main.sh
	tmux send-keys -t ${window}.right "find . -name 'main.sh' | entr -cs '${tmpdir}/main.sh'" C-m
	open_editor "main.sh" "main.sh";
fi;

# tmux split-pane -t ${window}.right -v
# tmux send-keys -t ${window}.bottom-right "cd ${tmpdir}" C-m
# tmux send-keys -t ${window}.bottom-right "find ${tmpdir} -name \"*.s\" | entr -cs \"clear; cat ${tmpdir}/main.s\"" C-m


tmux select-pane -t ${window}.left

if [ -z "$TMUX" ]; then
  tmux attach -t ${window}
fi


