#!/bin/bash

# Function to display help message
show_help() {
    echo "Usage: yt.playlist [OPTIONS] PLAYLIST_URL"
    echo "   or: yt.playlist [OPTIONS] --browser BROWSER --profile PROFILE"
    echo ""
    echo "Options:"
    echo "  --help          Show this message and exit."
    echo "  --verbose       Enable verbose output."
    echo "  --output DIR    Specify the output directory for playlist files (default: current directory)."
    echo ""
    echo "For the browser mode, supported browsers are 'brave' and 'firefox'."
    echo "The profile should be the name of the profile directory, e.g., 'Default' or 'Profile 1' for Brave."
    echo ""
    echo "Examples:"
    echo "  yt.playlist https://www.youtube.com/playlist?list=PLat4GgaVK09caz8Q_9mElDVS-4nbRZtKU"
    echo "  yt.playlist --browser brave --profile \"Profile 1\" --output playlists-directory/"
    echo ""
    echo "Requirements: yt-dlp, pup, jq, and sqlite3 must be installed."
}

# Initialize variables
verbose=0
output_dir="."
mode=""
browser=""
profile=""
playlist_url=""

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --help)
            show_help
            exit 0
            ;;
        --verbose)
            verbose=1
            shift
            ;;
        --output)
            output_dir="$2"
            shift 2
            ;;
        --browser)
            browser="$2"
            shift 2
            ;;
        --profile)
            profile="$2"
            shift 2
            ;;
        http*)
            playlist_url="$1"
            shift
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Determine mode based on arguments
if [[ -n "$playlist_url" ]]; then
    if [[ -n "$browser" || -n "$profile" ]]; then
        echo "Error: Cannot specify both playlist URL and browser/profile."
        exit 1
    fi
    mode="playlist"
elif [[ -n "$browser" && -n "$profile" ]]; then
    mode="browser"
else
    echo "Error: Must specify either a playlist URL or --browser and --profile."
    show_help
    exit 1
fi

# Check if yt-dlp is installed
if ! command -v yt-dlp &> /dev/null; then
    echo "Error: yt-dlp is not installed. Please install it first."
    exit 1
fi

# Playlist mode: Extract and print video links from a single playlist
if [[ "$mode" == "playlist" ]]; then
    if [[ $verbose -eq 1 ]]; then
        echo "Extracting links from playlist: $playlist_url"
    fi
    yt-dlp --quiet --no-warnings --flat-playlist --print url "$playlist_url"
fi

# Browser mode: Extract playlists and save to files
if [[ "$mode" == "browser" ]]; then
    # Check additional dependencies
    if ! command -v pup &> /dev/null; then
        echo "Error: pup is not installed. Please install it first."
        exit 1
    fi
    if ! command -v jq &> /dev/null; then
        echo "Error: jq is not installed. Please install it first."
        exit 1
    fi
    if ! command -v sqlite3 &> /dev/null; then
        echo "Error: sqlite3 is not installed. Please install it first."
        exit 1
    fi

    # Determine cookies file location based on browser
    if [[ "$browser" == "brave" ]]; then
        cookies_file="$HOME/.config/BraveSoftware/Brave-Browser/$profile/Cookies"
    elif [[ "$browser" == "firefox" ]]; then
        cookies_file="$HOME/.mozilla/firefox/$profile/cookies.sqlite"
    else
        echo "Unsupported browser: $browser"
        exit 1
    fi

    # Verify cookies file exists
    if [[ ! -f "$cookies_file" ]]; then
        echo "Cookies file not found: $cookies_file"
        exit 1
    fi

    # Extract YouTube cookies
    if [[ "$browser" == "brave" ]]; then
        cookie_string=$(sqlite3 "$cookies_file" "SELECT name, value FROM cookies WHERE host_key = '.youtube.com'" | awk '{printf "%s=%s; ", $1, $2}')
    elif [[ "$browser" == "firefox" ]]; then
        cookie_string=$(sqlite3 "$cookies_file" "SELECT name, value FROM moz_cookies WHERE host = '.youtube.com'" | awk '{printf "%s=%s; ", $1, $2}')
    fi

    # Fetch playlists page
    html=$(curl -s --cookie "$cookie_string" https://www.youtube.com/feed/playlists)
    if [[ -z "$html" ]]; then
        echo "Error: Failed to fetch playlists page. Cookies may be invalid or expired."
        exit 1
    fi

    # Parse playlists from HTML
    playlists=$(echo "$html" | pup 'a[href*="/playlist?list="] json{}' | jq -r '.[] | .text + "\t" + .href')
    if [[ -z "$playlists" ]]; then
        echo "Error: No playlists found on the page."
        exit 1
    fi

    # Create output directory if it doesn't exist
    mkdir -p "$output_dir"

    # Process each playlist
    while IFS=$'\t' read -r name url; do
        # Sanitize playlist name for file system (replace non-alphanumeric with underscores)
        file_name=$(echo "$name" | sed 's/[^a-zA-Z0-9]/_/g')
        file_path="$output_dir/$file_name.txt"
        if [[ $verbose -eq 1 ]]; then
            echo "Creating file for playlist '$name': $file_path"
        fi
        full_url="https://www.youtube.com$url"
        yt-dlp --quiet --no-warnings --flat-playlist --print url "$full_url" > "$file_path"
    done <<< "$playlists"
fi
