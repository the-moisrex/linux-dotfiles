#!/bin/bash

RED="\033[0;31m"
GRAY="\033[0;37m"
GREEN="\033[0;32m"
NC="\033[0m" # No Color


gitroot=".git";
until [ "$(realpath "$gitroot" 2>/dev/null)" = "/.git" -o \
      "$(realpath "$gitroot" 2>/dev/null)" = "/" -o \
      -d "$gitroot" \
    ]; do
  gitroot="../${gitroot}";
done;

proj_dir="$(realpath "$gitroot/.." 2>/dev/null)";
should_clean=true;
build_dir="";
is_interactive=true;

# find the project directories
function calculate_build_dir {
    build_dir=$(find $proj_dir -maxdepth 2 -type f -name build.ninja -o -name CMakeCache.txt -o -name Makefile | xargs -l dirname | sort -u | xargs -l basename);
    if $is_interactive; then
        if [ $(echo -e "$build_dir" | wc -l) != "1" ]; then
            if ! command -v dialog >/dev/null; then
                echo "Install the 'dialog' command.";
                exit 1;
            fi
            build_options=()
            readarray -t build_options <<< "$build_dir";
            echo "${build_options[@]}"
            build_dir=$(dialog --stdout --erase-on-exit --no-cancel --no-items --ok-label "Run" --trim --scrollbar --menu "Select the build directory:" 20 50 ${#build_options[@]} ${build_options[@]})
        fi
    else
        # select the first choice in non-interactive modes
        build_dir=$(echo -e "$build_dir" | head -n 1)
    fi
    build_dir=$(realpath "$proj_dir/$build_dir")
}


function print_cmake_targets {
    is_interactive=false;
    calculate_build_dir;

    # current_version=$(cmake --version | grep "cmake version" | cut -d" " -f3)
    # version="3.27"
    # if [[ $(echo -e "$version\n$current_version" | sort --version-sort -r | head -n1) == "$current_version" ]]; then
    #     # newer versions of cmake
    #     cmake --build "$build_dir" --target help | cut -d" " -f2 | tail -n +2
    # else
        # older versions of cmake
        # you can also use "ninja -t targets"
        cmake --build "$build_dir" --target help | awk 'BEGIN{ FS=":" } !/: phony|\.cmake|\[|build.ninja|^help/ { print $1 }'
    # fi
}

function run {
  scan_build="";
  debug_cmd=""
  if [ "$1" == "analyze" ]; then
      scan_build="scan-build"
      shift;
  elif [ "$1" == "lldb" ]; then
      debug_cmd="lldb";
      shift;
  elif [ "$1" == "gdb" ]; then
      debug_cmd="gdb";
      shift;
  fi

  calculate_build_dir

  old_dir=$(pwd);
  execfile="$@";

  if [ -d "$gitroot" -a -d "$proj_dir" -a -d "$build_dir" ]; then
    if [ -f "$build_dir/CMakeCache.txt" ]; then
      build_cmd="cmake --build '$build_dir' --target $execfile";
    elif [ -f "$build_dir/build.ninja" ]; then
      build_cmd="ninja -C '$build_dir' -v $execfile";
    elif [ -f "Makefile" ]; then
      build_cmd="make -C '$build_dir' $execfile";
    else
      echo -e "${RED}Wrong build directory.${NC}";
      return;
    fi;
    if $should_clean; then
        clear;
    fi
    echo -e "${GRAY}Project root:${NC}    $proj_dir"
    echo -e "${GRAY}Build Directory:${NC} $build_dir"
    echo -e "${GRAY}Build command:${NC}   $scan_build $build_cmd"
    echo -e "${GRAY}Exec command:${NC}    $scan_build $debug_cmd $execfile"
    if eval "stdbuf -i0 -o0 -e0 $scan_build $build_cmd"; then
      timeout 1s notify-send -t 800 -i utilities-terminal -a "Compiler" "Compiled Seccessfully.";
      if [ -f "$build_dir/$execfile" ]; then
        execfile="$build_dir/$execfile";
      fi
      if eval "$scan_build $debug_cmd $execfile"; then
        timeout 1s notify-send -t 1000 -i utilities-terminal -a "Compiler" "Tests Passed";
      else
        timeout 1s notify-send -t 1000 -i utilities-terminal -a "Compiler" "Tests Failed";
      fi;
    else
      timeout 1s notify-send -t 800 -i utilities-terminal -a "Compiler" "Compilation Failed.";
    fi;
  else
    echo -e "${RED}Project Root not found.${NC}"
  fi;
}


function keep-running {
  git -C "$proj_dir" ls-files -cm | entr -ardc $0 $@
}

function build-report {
  if [ -z "$@" ]; then
    echo "Targets are empty, specify some;"
    echo " Usage Example:"
    echo "     # test all the targets:"
    echo "   $ run targets | grep test- | xargs run report"
    exit 1
  fi


  calculate_build_dir

  if [ -d "$gitroot" -a -d "$proj_dir" -a -d "$build_dir" ]; then
    if $should_clean; then
        clear;
    fi
    echo -e "${GRAY}Project root:${NC}    $proj_dir"
    echo -e "${GRAY}Build Directory:${NC} $build_dir"
    
    all_cmds=""
    for target in $@; do
      if [ -f "$build_dir/CMakeCache.txt" ]; then
        build_cmd="cmake --build '$build_dir' --target $target";
      elif [ -f "$build_dir/build.ninja" ]; then
        build_cmd="ninja -C '$build_dir' -v $target";
      elif [ -f "Makefile" ]; then
        build_cmd="make -C '$build_dir' $target";
      else
        echo -e "${RED}Wrong build directory.${NC}";
        return;
      fi;
      cmd="stdbuf -i0 -o0 -e0 $scan_build $build_cmd &>/dev/null && echo -e \"${GREEN} - [SUCCESS]   $target ${NC}\" || echo -e \"${RED} - [FAILED]    $target ${NC} \t\t $build_cmd\""
      # echo -e "${GRAY} - [COMPILING] $target${NC}: $build_cmd"
      if command -v parallel &>/dev/null; then
        all_cmds="${all_cmds}\n${cmd}"
      else
        eval $cmd;
      fi
    done
    if command -v parallel &>/dev/null; then
      echo -ne "$all_cmds" | parallel -j+0
    fi
  else
    echo -e "${RED}Project Root not found.${NC}"
  fi;
}


exec_name=$(realpath "$0");
function print_help {
    echo "$exec_name help"
    echo "           [target]                        # the target to compile/run"
    echo "           keep [target]                   # keep running the target"
    echo "           analyze/scan-build [target]     # "
    echo "           lldb/gdb [target]               # run lldb/gdb on the target"
    echo "           less [command]                  # pipe 'command' to 'less'"
    echo "           print-targets                   # List the build targets"
    echo "           report/build-report [targets]   # build targets and see if they compile without errors"
    echo "           --quite --no-interactive -q     # Don't ask questions"
}


# Make a copy
args=("$@")

arg_pos=-1
for arg in "${args[@]}"; do
    arg_pos=$(($arg_pos + 1))
    case $arg in
        --no-interactive|--quite|-q)
            is_interactive=false
            unset "args[$arg_pos]"
            ;;
        --clean=false|--no-clean)
            should_clean=false;
            unset "args[$arg_pos]"
            ;;
        -r|less|-less|--less|-l|l)
            # Remove the string from the array by position
            unset "args[$arg_pos]"

            $0 --no-clean ${args[@]} | less --RAW-CONTROL-CHARS --buffers=-1;
            exit $?
            ;;
        help)
            print_help;
            exit 0;
            ;;
        keep)
            # Remove the string from the array by position
            unset "args[$arg_pos]"
            keep-running "${args[@]}";
            exit $?
            ;;
        print-targets|list|targets)
            shift;
            print_cmake_targets;
            exit;
            ;;
    esac
done


case "${args[0]}" in
    analyze|scan-build)
        unset "args[0]"
        run analyze ${args[@]};
        ;;
    lldb)
        unset "args[0]"
        run lldb ${args[@]};
        ;;
    gdb)
        unset "args[0]"
        run gdb ${args[@]};
        ;;
    build-report|report)
        unset "args[0]"
        build-report ${args[@]};
        ;;
    *)
        run ${args[@]};
        ;;
esac


