#!/bin/bash

exec_name="$0"
name=$(basename "$exec_name")
enc_key=""
enc_key_arg="--default-recipient-self"
file=""
curdir=$(dirname "$0")
tmp_dir="$(mktemp -d --suffix=-$USER-vault)"
enc_dir="${curdir}/../vault"

function closing {
    rm -rf "$tmp_dir";
    exit $1;
}

if command -v gpg2 --version >/dev/null; then
    gpg="gpg2"
elif command -v gpg --version >/dev/null; then
    gpg="gpg"
else
    echo "We're not able to find the gpg/gpg2 binaries.";
    closing 1;
fi

function print_help {
    echo "Read/Write/Execute encrypted file right here in this git repo"
    echo
    echo "Usage: $name sync"
    echo "             help"
    echo "             edit file"
    echo "             ls/list"
    echo "             print/cat/read file"
    echo "             add file"
    echo "             get file"
    echo "             rm|remove|delete file"
    echo "             get dir/directory dirname --output=dir"
    echo "             add dir/directory dirname"
    echo
    echo "Edit ~/.gnupg/gpg.conf and set 'default-key 123ABC' for the default key to use"
}

function sync {
    echo "sync"
}

function list_files {
    ls "$enc_dir/$file";
}

function remove {
    rm -f "$enc_dir/$file";
}

function decrypt_file {
    if [ ! -f "$enc_dir/$file" ]; then
        echo "The file '$enc_dir/$file' doesn't exist; creating it..." >&2;
        touch "$tmp_dir/$file";
    else
        echo "Decrypting '$enc_dir/$file'..." >&2;
        $gpg $enc_key_arg --output "$tmp_dir/$file" --decrypt "$enc_dir/$file";
    fi
}

function encrypt_file {
    if [ ! -f "$tmp_dir/$file" ]; then
        echo "The file '$tmp_dir/$file' doesn't exist; ignoring it." >&2;
    else
        echo "Encrypting '$tmp_dir/$file'..." >&2;
        file_dir=$(dirname "$file");
        mkdir -p "$enc_dir/$file_dir";
        $gpg $enc_key_arg --encrypt "$tmp_dir/$file";
        mv "$tmp_dir/$file.gpg" "$enc_dir/$file";
        rm -f "$tmp_dir/$file"
    fi
}

function encrypt_tar_dir {
    dir="$1"
    if [ ! -d "$dir" ]; then
        echo "The directory '$dir' doesn't exist.";
        return;
    fi
    dir=$(realpath "$dir")
    dir_name=$(basename "$dir");
    dir=$(realpath --relative-to="$PWD" "$dir")
    tar --overwrite -czvf "$tmp_dir/$dir_name.tar.gz" "$dir";
    file="$dir_name.tar.gz"
    encrypt_file
    rm -f "$dir_name.tar.gz"
}

function decrypt_tar_dir {
    tar="$1"
    dir="$2"
    tar=$(readlink -f "$tar")
    if [ ! -d "$tar" ]; then
        echo "The tarball file '$tar' doesn't exist.";
        return;
    fi
    if [ -z "$dir" ]; then
        dir=".";
    fi
    dir=$(realpath "$dir");
    dir_name=$(basename "$tar");
    dir_name="${dir_name/.tar.gz$/}"
    file="$dir_name.tar.gz"
    decrypt_file
    tar --overwrite -xzvf "$tmp_dir/$file" --directory "$dir";
    rm -f "$tmp_dir/$dir_name.tar.gz"
}

function replace_file {
    if [ ! -f "$file" ]; then
        echo "File doesn't exist: $file" >&2;
        echo "We can't encrypt something that don't exist." >&2;
        closing 1;
    else
        echo "Encrypting '$file'..." >&2;
        file_name=$(basename "$file");
        $gpg $enc_key_arg --encrypt "$file";
        mv "$file.gpg" "$enc_dir/$file_name";
        rm -f "$file.gpg";
    fi
}

function get_file {
    if [ ! -f "$enc_dir/$file" ]; then
        echo "File doesn't exist: $enc_dir/$file" >&2;
        echo "We can't decrypt something that don't exist." >&2;
        closing 1;
    else
        echo "Decrypting '$enc_dir/$file'..." >&2;
        file_name=$(basename "$file")
        $gpg $enc_key_arg --output "$file_name" --decrypt "$enc_dir/$file";
    fi
}

function edit {
    if [ -z "$EDITOR" ]; then
        EDITOR="vim";
        echo "Using '$EDITOR' as the default editor." >&2;
    fi

    decrypt_file;
    $EDITOR "$tmp_dir/$file";
    encrypt_file;
}

function print_file {
    decrypt_file;
    cat "$tmp_dir/$file";
}


############################## Options ###############################

action="help"
params="$@"
for i in "$@"; do
    case "$1" in
        help)
            action="help";
            ;;
        list|ls)
            action="list";
            file="$2";
            ;;
        sync)
            action="sync";
            ;;
        edit)
            action="edit";
            file="$2";
            ;;
        rm|remove|delete)
            action="remove";
            file="$2";
            ;;
        add)
            case "$2" in
                dir|directory)
                    action="add.dir"
                    file="$3"
                    ;;
                *)
                    action="add";
                    file="$2";
                    ;;
            esac
            ;;
        get)
            case "$2" in
                dir|directory)
                    action="get.dir"
                    file="$3"
                    ;;
                *)
                    action="get";
                    file="$2";
                    ;;
            esac
            ;;
        print|cat)
            action="print";
            file="$2";
            ;;
    esac
    shift;
done
eval set -- "$params"

options=$(getopt -n "$name" -l "help,sync,edit,list,print,recipient:,output:" -o "hselpr:o:" -a -- "$@")
if [ $? != 0 ]; then
    echo "Failed to parse options...exiting." >&2;
    closing 1;
fi
eval set -- "$options"

while true; do
    case "$1" in
        -h|--help|help)
            action="help"
            ;;
        -s|--sync|sync)
            action="sync"
            ;;
        -e|--edit|edit)
            action="edit"
            ;;
        -r|--recipient)
            enc_key="$2";
            enc_key_arg="--recipient $enc_key";
            shift;
            ;;
        -f|--file)
            file="$2";
            shift;
            ;;
        -o|--output)
            output_dir="$2";
            shift;
            ;;
        -l|--list)
            action="list";
            ;;
        -p|--print)
            action="print";
            ;;
        --)
            shift;
            break;
            ;;
    esac
    shift;
done


case $action in
    help)
        print_help;
        ;;
    sync)
        sync;
        ;;
    list)
        list_files;
        ;;
    print)
        print_file;
        ;;
    remove)
        remove;
        ;;
    add)
        replace_file;
        ;;
    get)
        get_file;
        ;;
    add.dir)
        encrypt_tar_dir "$file"
        ;;
    get.dir)
        decrypt_tar_dir "$file" "$output_dir"
        ;;
    edit)
        edit;
        ;;
esac
closing 0;
