#!/bin/bash -e

ARGUMENT_LIST=(
    "country:"
    "gateway:"
    "nordvpn"
    "iptables-filter"
    "help"
)


# read arguments
opts=$(getopt \
    --longoptions "$(printf "%s," "${ARGUMENT_LIST[@]}")" \
    --name "$(basename "$0")" \
    --options "" \
    -- "$@"
)

eval set --$opts

vpntype="ip"
while [[ $# -gt 0 ]]; do
    case "$1" in
        --country)
            countryiso=$2
            shift 2
            ;;

        --gateway)
            gateway=$2
            shift 2
            ;;
        
        --nordvpn)
            vpntype="nordvpn"
            shift 1
            ;;

        --iptables-filter)
            vpntype="iptables-filter"
            shift 1
            ;;

	--help)
	  echo "This script helps you to add routes for a specific country."
	  echo ""
	  echo "In order to run interactiveley just call this script without the --help switch."
	  echo "This command requires superuser privilages if --nordvpn is not specified! (MUST run as root)"
	  echo ""
	  echo "Arguments:"
	  echo -e "\t--country\tCountry of your choice as 2-letter ISO code. Example: us, ir"
	  echo -e "\t--gateway\tGateway used to route to these ip addresses. Example: 192.168.0.1 OR vpn0"
	  echo -e "\t--nordvpn\tRun nordvpn whitelist commands instead of standard ip commands"
      echo -e "\t--iptables-filter\tUse iptables' filter table to enable them; initially I used this because nordvpn is using iptables and their implementation for whitelisting seems buggy."
	  echo -e "\t--help\t\tShows this help."
	  exit
	  ;;

        *)
            break
            ;;
    esac
done


if [ -z ${countryiso+x} ];
then
	read -p 'Country ISO code (example us, ir): ' countryiso
else
	echo "Country: $countryiso"
fi

if [ $vpntype == "ip" ]; then
    if [ -z ${gateway+x} ];
    then
        read -p "Enter the gateway that you want to use for $countryiso (example 192.168.0.1/vpn0/enp2s0): " gateway
    else
        echo "Gateway: $gateway"
    fi
fi
countryiso=$(echo "$countryiso" | tr '[:upper:]' '[:lower:]')

# if you decide to change this directory, change it in the "clear-coredump" command as well
storage="$HOME/.cache/country-ips"


function update {
  if [ -d "$storage" ]; then
    git -C "$storage" pull --rebase=true --prune --force --depth=1 --progress --no-ff --no-edit --no-commit
  else
    git clone --depth=1 -b master https://github.com/herrbischoff/country-ip-blocks.git ${storage}
  fi;
}

input="$storage/ipv4/$countryiso.cidr"

function add {
  update || (echo failed to update && exit);

  while IFS= read -r line
  do

    if [ $vpntype == "ip" ]; then
        if [[ $gateway =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          ip route add "$line" via "$gateway"
        else
          ip route add "$line" dev "$gateway"
        fi
        echo "$line -> $gateway"
    elif [ $vpntype == "nordvpn" ]; then
        nordvpn whitelist add subnet $line
        echo "nordvpn whitelisted $line"
    elif [ $vpntype = "iptables-filter" ]; then
        iptables -t filter -I INPUT --destination $line -j ACCEPT
        iptables -t filter -I OUTPUT --destination $line -j ACCEPT
        echo "iptables -t filter -I INPUT/OUTPUT --destination $line -j ACCEPT"
    fi
  done < "$input"
}

function remove {
  while IFS= read -r line
  do
    if [ $vpntype == "ip" ]; then
        if [[ $gateway =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          ip route delete "$line" via "$gateway"
        else
          ip route delete "$line" dev "$gateway"
        fi
        echo "$line -> $gateway"
    elif [ $vpntype == "nordvpn" ]; then
        nordvpn whitelist remove subnet $line;
        echo "nordvpn whitelist removal of $line"
    elif [ $vpntype = "iptables-filter" ]; then
        iptables -t filter -D INPUT --destination $line -j ACCEPT
        iptables -t filter -D OUTPUT --destination $line -j ACCEPT
        echo "iptables -t filter -I INPUT/OUTPUT --destination $line -j ACCEPT"
    fi
  done < "$input"
}


