#!/bin/bash

# Android Emulator Network Namespace Script
# - Runs emulator as current user with correct AVD paths
# - Bypasses host VPN using network namespace
# - Supports --help, --clean, and -avd options

set -e

# Configuration
NETNS=emunet
VETH_HOST=veth-host
VETH_NS=veth-ns
EMULATOR_IP=10.200.1.2
HOST_IP=10.200.1.1
SUBNET=10.200.1.0/24
EMULATOR_AVD="Pixel9Pro"
ADB_PORT=5555
TIMEOUT=60

# Help message
show_help() {
cat <<EOF
Usage: $0 [OPTIONS]

Options:
  -a, --avd <name>   Specify AVD name (default: Pixel9Pro)
      --clean        Remove network namespace and nftables
  -h, --help         Show this help message

Example:
  $0 --avd Pixel9Pro
  $0 --clean
EOF
}

# Cleanup function
clean() {
    echo "Cleaning up..."
    sudo ip netns del $NETNS 2>/dev/null || true
    sudo ip link del $VETH_HOST 2>/dev/null || true
    sudo nft delete table ip emu_nat 2>/dev/null || true
    echo "Cleanup complete"
    exit 0
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -a|--avd)
            EMULATOR_AVD="$2"
            shift 2
            ;;
        --clean)
            clean
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "Invalid option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Network setup
sudo ip netns add $NETNS 2>/dev/null || true
sudo ip link add $VETH_HOST type veth peer name $VETH_NS 2>/dev/null || true
sudo ip link set $VETH_NS netns $NETNS
sudo ip addr add $HOST_IP/24 dev $VETH_HOST
sudo ip link set $VETH_HOST up
sudo ip netns exec $NETNS ip addr add $EMULATOR_IP/24 dev $VETH_NS
sudo ip netns exec $NETNS ip link set $VETH_NS up
sudo ip netns exec $NETNS ip link set lo up
sudo ip netns exec $NETNS ip route add default via $HOST_IP
# sudo sysctl -w net.ipv4.ip_forward=1 >/dev/null

# nftables NAT configuration
# sudo nft add table ip emu_nat 2>/dev/null || true
# sudo nft add chain ip emu_nat postrouting { type nat hook postrouting priority 100 \; }
# sudo nft add rule ip emu_nat postrouting ip saddr $SUBNET oifname != "$VETH_HOST" masquerade

exit 1

# Start emulator as current user with proper environment
echo "Starting emulator '$EMULATOR_AVD' in namespace '$NETNS'..."
sudo -E ip netns exec $NETNS sudo -E -u $USER HOME=$HOME bash -c "
    emulator -avd \"$EMULATOR_AVD\" -no-snapshot-save > /tmp/emulator.log 2>&1 &
"

# Wait for ADB port
# echo -n "Waiting for emulator to initialize "
# start_time=$(date +%s)
# while true; do
#     if nc -z -w 1 $EMULATOR_IP $ADB_PORT 2>/dev/null; then
#         break
#     fi
#     
#     if (( $(date +%s) - start_time > TIMEOUT )); then
#         echo -e "\nError: Emulator failed to start within $TIMEOUT seconds"
#         echo "Check logs: /tmp/emulator.log"
#         echo "Common issues:"
#         echo "1. AVD '$EMULATOR_AVD' doesn't exist (run 'avdmanager list avd')"
#         echo "2. Incorrect CPU architecture (use x86_64 system image)"
#         exit 1
#     fi
#     
#     echo -n "."
#     sleep 1
# done
# echo -e "\nEmulator ADB port active"

# Connect adb
# echo "Connecting to emulator at $EMULATOR_IP:$ADB_PORT"
# adb connect $EMULATOR_IP:$ADB_PORT

# Wait for full boot
echo "Waiting for system to boot..."
sudo ip netns exec $NETNS adb -e wait-for-device
while true; do
    boot_complete=$(sudo ip netns exec $NETNS adb -e shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
    [[ "$boot_complete" == "1" ]] && break
    echo -n "."
    sleep 1
done
echo -e "\nSystem ready"

# Port forwarding
echo "Setting up port forwarding..."
sudo ip netns exec $NETNS adb -e forward tcp:1088 tcp:1088
sudo ip netns exec $NETNS socat TCP-LISTEN:1089,fork,reuseaddr TCP:127.0.0.1:1088 2>/dev/null &
socat TCP-LISTEN:1088,fork,reuseaddr TCP:$EMULATOR_IP:1089 2>/dev/null &

# Connection info
cat <<EOF

===================================================
Emulator successfully started!
Namespace: $NETNS
AVD Name:  $EMULATOR_AVD
IP:        $EMULATOR_IP
ADB:       $EMULATOR_IP:$ADB_PORT
Forwarded: 127.0.0.1:1088 -> $EMULATOR_IP:1088

Connect using:
nc $EMULATOR_IP 1088    # Direct connection
nc 127.0.0.1 1088       # Through forwarded port

ADB Devices:
$(adb devices | grep "$EMULATOR_IP")

To clean up:
$0 --clean
===================================================
EOF

wait
