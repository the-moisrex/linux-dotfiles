#!/usr/bin/nft -f

# https://www.v2ray.com/en/configuration/protocols/dokodemo.html
# https://guide.v2fly.org/en_US/app/transparent_proxy.html#procedures
# https://www.infradead.org/~mchehab/kernel_docs/networking/tproxy.html
# https://arinc9.notion.site/Transparent-Proxy-Using-v2ray-c6bfee7be82f4084a73a132e362c6a10

define tproxy_port              = 8999
define local_network            = { 192.168.88.0/24, 192.168.167.164/30, 127.0.0.0/8, 10.1.1.0/24 }
define skip_vpn_mark            = 0xe1f1 # NordVPN default vpn mark used in iproute2
define accepted_fwmark          = 0xe5ff # Accepted packets' mark; used for tor load balancing scripts
define outbound_v2ray_fwmark    = 0xfd   # Skip local loopback with this (numerical value: 253); this value can be changed in v2ray
define lo_v2ray_fwmark          = 0xff   # Directly connect SO_MARK to 0xff traffic (0xff is a hexadecimal number, numerically equivalent to 255), the purpose of this rule is to avoid proxy loopback with local (gateway) traffic
define multicast_ips            = 224.0.0.0-239.255.255.255
define public_ipv4              = {
    1.0.0.0-9.255.255.255,
    11.0.0.0-100.63.255.255,
    100.128.0.0-126.255.255.255,
    128.0.0.0-169.253.255.255,
    169.255.0.0-172.15.255.255,
    172.32.0.0-191.255.255.255,
    192.0.1.0/24,
    192.0.3.0-192.88.98.255,
    192.88.100.0-192.167.255.255,
    192.169.0.0-198.17.255.255,
    198.20.0.0-198.51.99.255,
    198.51.101.0-203.0.112.255,
    203.0.114.0-223.255.255.255
}

table inet v2ray {
    counter v2ray { comment "Transparent Proxy to v2ray" }

    chain prerouting {
        type nat hook prerouting priority dstnat;
        policy accept;
        
        # filter out what you want to go through the transparent proxy here
        # socket transparent 0 return; # accept only those with "socket transparent 1"
        meta mark $accepted_fwmark return;
        meta mark $skip_vpn_mark return; # marked to be skiped already
        meta mark $outbound_v2ray_fwmark return; # v2ray itself generated this packet
        meta mark $lo_v2ray_fwmark return; # for some reason already marked; it shouldn't happen
        ip daddr != $public_ipv4 return;

        tcp dport { 80, 443 } counter name v2ray redirect to :$tproxy_port;

        # QUIC protocol; we t-proxy UDP here because we don't want to change the packet
        udp dport { 443 } counter name v2ray tproxy to :$tproxy_port mark set $lo_v2ray_fwmark accept;
    }

    chain output {
        type nat hook output priority filter;
        policy accept;

        # filter out what you want to go through the transparent proxy here
        # socket transparent 0 return; # accept only those with "socket transparent 1"
        meta mark $accepted_fwmark return;
        meta mark $skip_vpn_mark return; # marked to be skiped already
        meta mark $outbound_v2ray_fwmark return; # v2ray itself generated this packet
        meta mark $lo_v2ray_fwmark return; # for some reason already marked; it shouldn't happen
        ip daddr != $public_ipv4 return;

        tcp dport { 80, 443 } counter name v2ray redirect to :$tproxy_port;
        
        # QUIC Protocol; no t-proxying here; because our source address is already local
        udp dport { 80, 443 } counter name v2ray mark set $lo_v2ray_fwmark accept;
        # udp dport { 443 } counter name v2ray mark set $lo_v2ray_fwmark redirect to :$tproxy_port;
    }
}

