#!/bin/bash

curdir=$(dirname "$0")
server=""
timeout=""

function print_help {
    name="iptun"
    echo "Description:"
    echo "       This script will let you create a tunnel between two systems,"
    echo "       and route (almost) all the traffic here to that macine."
    echo "       This can be useful when two machine are separated by a router,"
    echo "       and you want to route your traffic to that machine so it can"
    echo "       re-route them through a VPN for example."
    echo
    echo "Usage: $name help                      # show this help"
    echo "       $name enable   remote-machine   # enable tunnel"
    echo "       $name disable  remote-machine   # disable tunnel"
    echo "       $name reenable remote-machine   # re-enable tunnel"
    echo "       $name flash N remote-machine    # establish a tunnel for N mins"
}

function enable_tunnel {
    ssh_cmd="ssh $server"
    local_name=$(uname -n);
    remote_name=$(eval $ssh_cmd -- uname -n 2>/dev/null)
    remote_link_name="ip2${local_name}"
    local_link_name="ip2${remote_name}"
    local_ip=$(ip -br -oneline -4 addr | grep UP | sed -r 's/ +/ /g' | cut -sd" " -f3 | cut -d"/" -f1 | head -n 1)
    remote_ip=$(eval $ssh_cmd -- "ip -br -oneline -4 addr | grep UP | sed -r 's/ +/ /g' | cut -sd' ' -f3 | cut -d'/' -f1 | head -n 1" 2>/dev/null)
    local_tun_sub="192.168.167.165/30"
    remote_tun_sub="192.168.167.166/30"
    local_tun_ip=$(echo $local_tun_sub | cut -d'/' -f1)
    remote_tun_ip=$(echo $remote_tun_sub | cut -d'/' -f1)
    local_route="$local_tun_ip/32"
    remote_route="$remote_tun_ip/32"
    table_id=$(echo $remote_tun_ip | cut -d'.' -f4)
    routing_mark="0xe2f2"
    eval $ssh_cmd /bin/bash -- << EOF
        sudo sysctl net/ipv4/ip_forward=1;
        sudo ip link add name $remote_link_name type ipip local any remote $local_ip;
        sudo ip link set $remote_link_name up;
        sudo ip addr add $remote_tun_sub dev $remote_link_name;
        sudo ip route add $local_route dev $remote_link_name proto static metric 50;
EOF
    sudo ip link add name $local_link_name type ipip local any remote $remote_ip;
    sudo ip link set $local_link_name up;
    sudo ip addr add $local_tun_sub dev $local_link_name;
    sudo ip route add $remote_route dev $local_link_name proto static metric 50;

    # setup routing table
    sudo ip route add default via $remote_tun_ip dev $local_link_name proto static src $local_tun_ip metric 50 table $table_id;
    sudo ip rule add from all fwmark $routing_mark table $table_id;
    sudo nft -f $curdir/iptun.client.nft;

    # Ping to enable the connection
    ping -c 3 $remote_tun_ip;
    eval $ssh_cmd -- ping -c 3 $local_tun_ip;

    echo "Local: "
    echo "       Name:         $local_name"
    echo "       Link name:    $local_link_name"
    echo "       Public IP:    $local_ip"
    echo "       Tunnel IP:    $local_tun_sub"
    echo "       Route:        $local_route"
    echo "       Table ID:     $table_id"
    echo "       Routing mark: $routing_mark"
    echo
    echo "Remote: "
    echo "       Name:         $remote_name"
    echo "       Link name:    $remote_link_name"
    echo "       Public IP:    $remote_ip"
    echo "       Tunnel IP:    $remote_tun_sub"
    echo "       Route:        $remote_route"
    echo "       SSH command:  $ssh_cmd"
}

function disable_tunnel {
    ssh_cmd="ssh $server"
    local_name=$(uname -n);
    remote_name=$(eval $ssh_cmd -- uname -n 2>/dev/null)
    remote_link_name="ip2${local_name}"
    local_link_name="ip2${remote_name}"
    local_tun_sub="192.168.167.165/30"
    remote_tun_sub="192.168.167.166/30"
    local_tun_ip=$(echo $local_tun_sub | cut -d'/' -f1)
    remote_tun_ip=$(echo $remote_tun_sub | cut -d'/' -f1)
    local_route="$local_tun_ip/32"
    remote_route="$remote_tun_ip/32"
    table_id=$(echo $remote_route | cut -d'/' -f1 | cut -d'.' -f4)
    routing_mark="0xe2f2"
    eval $ssh_cmd /bin/bash -- << EOF
        sudo ip route delete $local_route dev $remote_link_name proto static metric 50;
        sudo ip link set $remote_link_name down;
        sudo ip link delete $remote_link_name;
EOF
    sudo nft delete table inet iptun;
    sudo ip route delete default via $remote_tun_ip dev $local_link_name proto static src $local_tun_ip metric 50 table $table_id;
    sudo ip rule del from all fwmark $routing_mark table $table_id;
    sudo ip route delete $remote_route dev $local_link_name proto static metric 50;
    sudo ip link set $local_link_name down;
    sudo ip link delete $local_link_name;

    echo "Local: "
    echo "       Name:         $local_name"
    echo "       Link name:    $local_link_name"
    echo "       Tunnel IP:    $local_tun_sub"
    echo "       Route:        $local_route"
    echo "       Table ID:     $table_id"
    echo "       Routing mark: $routing_mark"
    echo
    echo "Remote: "
    echo "       Name:         $remote_name"
    echo "       Link name:    $remote_link_name"
    echo "       Tunnel IP:    $remote_tun_sub"
    echo "       Route:        $remote_route"
    echo "       SSH command:  $ssh_cmd"
}

case "$1" in
    help)
        print_help;
        ;;

    enable)
        server="$2"
        enable_tunnel
        ;;

    disable)
        server="$2"
        disable_tunnel
        ;;

    reenable)
        server="$2"
        disable_tunnel
        enable_tunnel
        ;;

    flash)
        action="flash"
        timeout="$2"
        server="$3"
        ;;

    *)
        print_help;
        ;;
esac

