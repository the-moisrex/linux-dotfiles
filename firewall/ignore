#!/bin/bash


# Add a domain to the list of domains that don't need to go through VPN
ignored_domains_file="$HOME/.config/firewall/ignored-domains.txt"
never_ignored_domains_file="$HOME/.config/firewall/never-ignored-domains.txt"
ignored_nftables_set_name="ignored"
never_ignored_nftables_set_name="neverignored"
ignored_nftables_geoips4_set_name="geoips4"
never_ignored_nftables_geoips4_set_name="nevergeoips4"


# if you decide to change this directory, change it in the "clear-coredump", and in "net.routes.skip" commands as well
countries_repo="$HOME/.config/firewall/country-ips"

nft_include_dir="$HOME/.config/firewall/nft"
mkdir -p "$nft_include_dir";

dnsmasq_conf_dir="/etc/dnsmasq.d"
dnsmasq_file="$dnsmasq_conf_dir/ignored.conf"
never_dnsmasq_file="$dnsmasq_conf_dir/never-ignored.conf"

countryiso="ir"


# Test an IP address for validity:
# Usage:
#      valid_ip IP_ADDRESS
#      if [[ $? -eq 0 ]]; then echo good; else echo bad; fi
#   OR
#      if valid_ip IP_ADDRESS; then echo good; else echo bad; fi
#
function valid_ip() {
    local  ip=$1
    local  stat=1

    if command -v ipcalc >/dev/null; then
        if (ipcalc "$ip" | grep 'INVALID ADDRESS') >/dev/null; then
            return 1;
        else
            return 0;
        fi
    fi

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}(\/[0-9]{1,2})?$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}


function print_help {
    echo "Usage: ignore help";
    echo "       ignore add domain.com"
    echo "       ignore append domain.com"
    echo "       ignore add country ir"
    echo "       ignore del domain.com"
    echo "       ignore remove domain.com"
    echo "       ignore remove country ir"
    echo "       ignore update"
    echo "       ignore update domains"
    echo "       ignore update countries"
    echo "       ignore update dnsmasq"
    echo
    echo "       ignore list domains"
    echo "       ignore list ips"
    echo "       ignore list ipset"
    echo "       ignore list country ir"
    echo "       ignore list countries"
    echo 
    echo "       ignore nft create country ir"
    # echo "       ignore nft clear country ir"
    # echo "       ignore nft list"
    echo "       ignore nft add country ir [--force]"
    # echo "       ignore nft add ignored"
    # echo "       ignore nft remove ignored"
    # echo "       ignore nft remove country ir"
    echo
    echo "       ignore never [same commands as others]  # control never-ignored domains/ips/countries/..."
}

function save_dnsmasq_file {
    if [ ! -d "$dnsmasq_conf_dir" ]; then
        echo "You don't have DNSMasq Server.";
        return;
    fi
    sudo mkdir -p "$nft_include_dir";
    local content="";
    local dns_ip;
    dns_ip=$(nmcli dev show | grep 'IP4.DNS' | grep -vE "127.0.0.1|192.168." | head -n 1 | awk '{print $2}')
    if [ -z "$dns_ip" ]; then
        dns_ip="8.8.8.8";
    fi
    if [ -f "$ignored_domains_file" ]; then
        while read -r domain; do
            if valid_ip "$domain"; then 
                # It's an ip address, let's ignore it
                echo "Ignore adding IP ${domain} to dnsmasq file.";
            else
                content="$content\nnftset=/$domain/inet#mangle#$ignored_nftables_set_name";
                content="$content\nserver=/$domain/$dns_ip";
            fi
        done < "$ignored_domains_file";
    fi;
    echo -e "$content" | sudo tee "$dnsmasq_file";
    echo "Saved the domain's configs for dnsmasq in: $dnsmasq_file";
    sudo systemctl restart dnsmasq.service;
}

function nft_save {
    name="$1"
    ipset="$2"
    file="$nft_include_dir/$name.nft"
    cat > "$file" <<-END
    set $name {
        type ipv4_addr
        flags interval # enable CIDR and ranges
        elements = {
            $ipset
        }
    }
END
    echo "Saved $name to $file";
}

function nft_create_country {
    name="$1";
    file="$nft_include_dir/$name.nft"
    iso_code="$name";
    if [ -z "$iso_code" ]; then
        iso_code="$countryiso";
    fi
    input="$countries_repo/ipv4/$countryiso.cidr"
    ipset=$(tr '\n' ',' < "$input");
    ipset="${ipset::-1}"
    nft_save "$name" "$ipset";
}

function nft_add_country {
    name="$1"
    is_force="$2"
    file="$nft_include_dir/$name.nft"
    if [ ! -f "$file" ]; then
        echo "no such file: $file"
        return;
    fi
    if sudo nft -t list set inet mangle "$name" &>/dev/null; then
        echo "Already added";
        if [ "$is_force" != "--force" ]; then
            return;
        else
            echo "But, forcing it.";
        fi
    fi
    set_source=$(cat "$file");
    sudo nft -f - <<-END
table inet mangle {
    $set_source
}
END

    if [ "$ignored_nftables_set_name" == "$never_ignored_nftables_set_name" ]; then
        sudo nft add counter inet mangle "skip.never.$name" \{ comment \"Never Skip GeoIPs for "$name" country\" \};
        sudo nft insert rule inet mangle skipper ip daddr "@$name" counter name "skip.never.$name" return;
    else
        sudo nft add counter inet mangle "skip.$name" \{ comment \"Skip GeoIPs for "$name" country\" \};
        sudo nft add rule inet mangle skipper ip daddr "@$name" counter name "skip.$name" goto marker comment \"ignored country with code "$name"\";
    fi
}


function list_domains {
    if [ -f "$ignored_domains_file" ]; then
        while read -r domain; do
            echo "$domain";
        done < "$ignored_domains_file";
    fi;
}

function list_ipset {
    sudo nft list set inet mangle ignored
}

function list_ips {
    if [ -f "$ignored_domains_file" ]; then
        while read -r domain; do
            echo "$domain";
            while IFS= read -r ip; do
                echo  "  $ip"
            done < <(dig +short +timeout=5 "$domain" | grep '^[.0-9]*$');
            echo
        done < "$ignored_domains_file";
    fi;
}

function ignore {
    domain="$1"
    if [ -z "$domain" ]; then
        print_help;
        return;
    fi;
    echo "Adding $domain to the ignored list."
    echo "$domain" >> "$ignored_domains_file";
    sort -u "$ignored_domains_file" -o "$ignored_domains_file";
    local ips=""
    if valid_ip "$domain"; then 
        # It's an ip address
        ip="$domain"
        ips="$ips$ip, "
        ipcount=$(( "$ipcount" + 1 ));
    else
        # It's a domain
        while IFS= read -r ip; do
            # echo  "  Adding ip address $ip to the 'ignored' ip set."
            ips="$ips$ip, "
            ipcount=$(( "$ipcount" + 1 ));
        done < <(dig +short +timeout=5 "$domain" | grep '^[.0-9]*$');
    fi
    sudo nft add element inet mangle $ignored_nftables_set_name \{ "${ips%, }" \}
    echo "  Added $ipcount ips to 'inet mangle $ignored_nftables_set_name': ${ips%, }";
    echo
}

function unignore {
    domain="$1"
    if [ -z "$domain" ]; then
        print_help;
        return;
    fi;
    echo "Removing $domain from ignored list."
    grep -v "$domain" "$ignored_domains_file" | sponge "$ignored_domains_file"
    local ips=""
    if valid_ip "$domain"; then 
        # It's an ip address
        ip="$domain"
        ips="$ips$ip, "
        ipcount=$(( "$ipcount" + 1 ));
    else
        # It's a domain
        while IFS= read -r ip; do
            # echo  "  Adding ip address $ip to the 'ignored' ip set."
            ips="$ips$ip, "
            ipcount=$(( "$ipcount" + 1 ));
        done < <(dig +short +timeout=5 "$domain" | grep '^[.0-9]*$');
    fi
    sudo nft delete element inet mangle $ignored_nftables_set_name \{ "${ip%, }" \}
    echo "  Deleted $ipcount IPs from the 'inet mangle $ignored_nftables_set_name' ipset: ${ips%, }";
    echo
}


# function update_ignores {
#     if [ -f "$ignored_domains_file" ]; then
#         ips="";
#         ip_cache_count=0;
#         while read -r domain; do
#             if valid_ip "$domain"; then 
#                 # It's an ip address
#                 ip="$domain";
#                 ips="${ips}${ip}, ";
#                 ip_cache_count=$(( "$ip_cache_count" + 1 ));
#                 ipcount=$(( "$ipcount" + 1 ));
#                 echo "Adding $ip to the ignored list.";
#                 if [ $ip_cache_count -ge 30 ]; then
#                     echo "Emptying $ip_cache_count IP cache, and adding them to nftables.";
#                     sudo nft add element inet mangle $ignored_nftables_set_name \{ "$ips" \}
#                     ips="";
#                     ip_cache_count=0;
#                 fi
#             else
#                 echo "Adding $domain to the ignored list."
#                 # It's a domain
#                 while IFS= read -r ip; do
#                     echo  "  Adding ip address $ip to the 'ignored' ip set."
#                     sudo nft add element inet mangle $ignored_nftables_set_name \{ "$ip" \}
#                     ipcount=$(( "$ipcount" + 1 ));
#                 done < <(dig +short +timeout=2 "$domain" | grep '^[.0-9]*$');
#                 echo "  Added $ipcount IPs to the 'ignored' ipset.";
#                 echo
#             fi
#         done < "$ignored_domains_file";
#         if [ -n "$ips" ]; then
#             echo "Adding all accumulated IPs.";
#             sudo nft add element inet mangle $ignored_nftables_set_name \{ "$ips" \}
#         fi
#     fi;
# }

function update_ignores {
    if [ -f "$ignored_domains_file" ]; then
        # Separate domains and IPs into different arrays
        domains=()
        ips=()
        while read -r line; do
            if valid_ip "$line"; then
                ips+=("$line")
            else
                domains+=("$line")
            fi
        done < "$ignored_domains_file"

        # Process domains
        echo "Resolving domains..."
        resolved_ips=()
        while IFS= read -r ip; do
            resolved_ips+=("$ip")
            # echo "  Adding ip address $ip to the 'ignored' ip set."
        done < <(dig +short +timeout=5 "${domains[@]}" | grep '^[.0-9]*$')

        # Add all resolved IPs and accumulated IPs to nftables in batches
        all_ips=("${ips[@]}" "${resolved_ips[@]}")
        ip_cache_count=0
        ips_string=""
        for ip in "${all_ips[@]}"; do
            ips_string+="${ip}, "
            ip_cache_count=$(( "$ip_cache_count" + 1 ))
            ipcount=$(( "$ipcount" + 1 ))
            # echo "Adding $ip to the ignored list."
            if [ $ip_cache_count -ge 500 ]; then
                echo "Emptying $ip_cache_count IP cache, and adding them to nftables."
                echo "Adding IPs: ${ips_string%, }"
                echo
                sudo nft add element inet mangle $ignored_nftables_set_name "{ ${ips_string%, } }"
                ips_string=""
                ip_cache_count=0
            fi
        done

        # Add any remaining IPs
        if [ -n "$ips_string" ]; then
            echo "Adding all accumulated IPs."
            echo "Adding IPs: ${ips_string%, }"
            echo
            sudo nft add element inet mangle $ignored_nftables_set_name "{ ${ips_string%, } }"
        fi
    fi
}


function update_countries {
    if [ -d "$countries_repo" ]; then
        echo "Updateing the countries' IPs repository.";
        git -C "$countries_repo" pull origin master --rebase=true --prune --force --depth=1 --progress --no-ff --no-edit --no-commit
    else
        echo "Downloading the countries' IPs repository.";
        git clone --depth=1 -b master https://github.com/herrbischoff/country-ip-blocks.git "$countries_repo"
    fi;
}

# function ignore_country {
#     iso_code="$1";
#     if [ -z "$iso_code" ]; then
#         iso_code="$countryiso";
#     fi
# 
# 
#     input="$countries_repo/ipv4/$countryiso.cidr"
# 
#     ipcount=0
#     while IFS= read -r ip; do
#         echo -ne "\r\033[KAdding ip address $ip to the '$iso_code' ip set."
#         sudo nft add element inet mangle $ignored_nftables_geoips4_set_name \{ "$ip" \};
#         ipcount=$(( "$ipcount" + 1 ));
#     done < "$input";
#     echo -ne "\r\033[KAdded $ipcount ips for country code '$iso_code'.";
#     echo
# }

function ignore_country {
    iso_code="$1";
    if [ -z "$iso_code" ]; then
        iso_code="$countryiso";
    fi

    input="$countries_repo/ipv4/$iso_code.cidr"

    ipcount=0
    ip_batch=""
    while IFS= read -r ip; do
        ip_batch+="$ip, "
        ipcount=$(( "$ipcount" + 1 ))
        if [ "$ipcount" -ge 500 ]; then
            echo -e "\033[KAdding batch of ${ipcount} IPs to the '$iso_code' ip set."
            echo "${ip_batch%, }"
            sudo nft add element inet mangle $ignored_nftables_geoips4_set_name \{ "${ip_batch%, }" \};
            echo
            ip_batch=""
            ipcount=0
        fi
    done < "$input"

    # Add any remaining IPs
    if [ "$ipcount" -gt 0 ]; then
        echo -e "Adding final batch of ${ipcount} IPs to the '$iso_code' ip set."
        echo "${ip_batch%, }"
        sudo nft add element inet mangle $ignored_nftables_geoips4_set_name \{ "${ip_batch%, }" \};
        echo
    fi

    echo -e "Added $ipcount ips for country code '$iso_code'.";
    echo
}


function unignore_country {
    iso_code="$1";
    if [ -z "$iso_code" ]; then
        iso_code="$countryiso";
    fi

    input="$countries_repo/ipv4/$iso_code.cidr"

    ipcount=0
    while IFS= read -r ip; do
        echo  "  Removing ip address $ip from the 'geoips4' ip set."
        sudo nft delete element inet mangle $ignored_nftables_geoips4_set_name \{ "$ip" \}
        ipcount=$(( "$ipcount" + 1 ));
    done < "$input";
    echo "  Deleted $ipcount IPs from the 'geoips4' ipset.";
    echo
}

function list_country {
    iso_code="$1";
    if [ -z "$iso_code" ]; then
        iso_code="$countryiso";
    fi

    input="$countries_repo/ipv4/$iso_code.cidr"

    ipcount=0
    echo "Listing IPs of country $iso_code:";
    while IFS= read -r ip; do
        echo "$ip";
        ipcount=$(( "$ipcount" + 1 ));
    done < "$input";
    echo "Found $ipcount ips for country code '$iso_code'.";
}

function list_countries_ipset {
    sudo nft list set inet mangle $ignored_nftables_geoips4_set_name
}

function update_all {
    save_dnsmasq_file;
    update_ignores
    update_countries
    # todo: update individual countries as well
}

function run {
    case "$1" in
        help)
            print_help;
            ;;
        never)
            shift 1;
            ignored_domains_file="$never_ignored_domains_file"
            ignored_nftables_set_name="$never_ignored_nftables_set_name"
            ignored_nftables_geoips4_set_name="$never_ignored_nftables_geoips4_set_name"
            dnsmasq_file="$never_dnsmasq_file"
            run $@;
            ;;
        list)
            case "$2" in
                ipset)
                    list_ipset;
                    ;;
                ips)
                    list_ips;
                    ;;
                domains)
                    list_domains;
                    ;;
                country)
                    list_country "$3";
                    ;;
                countries)
                    list_countries_ipset;
                    ;;
                *)
                    list_ips;
                    ;;
            esac;
            ;;
        update)
            case "$2" in
                countries)
                    update_countries;
                    ;;
                ignored|ignore|ignores|domains|domain)
                    update_ignores;
                    ;;
                dnsmasq)
                    save_dnsmasq_file;
                    ;;
                all|*)
                    update_all;
                    ;;
            esac
            ;;
        add|append)
            case "$2" in
                country)
                    ignore_country "$3";
                    ;;
                *)
                    ignore "$2";
                    ;;
            esac
            ;;
        del|delete|remove)
            case "$2" in
                country)
                    unignore_country "$3";
                    ;;
                *)
                    unignore "$2";
                    ;;
            esac
            ;;
        nft)
            case "$2" in
                create)
                    case "$3" in
                        country)
                            nft_create_country "$4";
                            ;;
                        *)
                            echo "Create what?";
                            ;;
                    esac
                    ;;
                add)
                    case "$3" in
                        country)
                            nft_add_country "$4" "$5";
                            ;;
                        *)
                            echo "Add what?";
                            ;;
                    esac
                    ;;
                *)
                    echo "nft file what?";
                    ;;
            esac
            ;;
        *)
            print_help;
            ;;
    esac;
}

run $@
