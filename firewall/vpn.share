#!/bin/bash

gateway=$(ip route | awk '/default/ { print $3 }') # calculate default gateway
action="print_help"

# List of public DNS servers
dnsips_url="https://public-dns.info/nameservers.txt";
dnsips_file="$HOME/.cache/DNSIPs.txt";

ignored_domains_file="$HOME/.cache/firewall/ignored-domains.txt"

# skip vpn chain name
skip_chain_name="Skipper"

countryiso="ir"
iptables_mark="0xe1f1"

# if you decide to change this directory, change it in the "clear-coredump", and in "net.routes.skip" commands as well
countries_repo="$HOME/.cache/firewall/country-ips"

# Get the ip address of the specified domain (only one ip)
function ipof {
    dig +short $1 | grep '^[.0-9]*$' | head -n 1
}

local_ip=$(hostname --ip-address | cut -d" " -f 1);

function print_help {
    echo "Usage: $0 start/stop/clear [--router my_router]"
    echo
    echo -e "  actions    \t\t start/stop/clear"
    echo -e "  -g|--gateway $gateway \t Set the router ip address or DNS name"
    echo -e "  -i|--ip $local_ip \t Set local ip address"
    echo -e "  -m|--mark $iptables_mark \t Set fwmark to be used in iptables"
    echo -e "  -h|--help|help \t\t Print this message"
}

# Check if ipset is installed
if ! command -v ipset &>/dev/null; then
    echo "'ipset' is not installed. On Arch Linux install it with:"
    echo "  $ pacman -S ipset"
    exit 1;
fi;

for i in "$@"; do
    case $i in
        -g|--gateway)
            gateway="$2"
            resolved=$(ipof $gateway)
            if "$resolved" != ""; then
                gateway="$resolved";
            fi;
            shift 2;
            ;;
        -i|--ip)
            local_ip="$2"
            shift 2;
            ;;
        -c|--country)
            countryiso="$2"
            shift 2
            ;;
        -m|--mark)
            iptables_mark="$2"
            if [ -z "$mark" ]; then
                echo "You should pass a valid mark.";
                exit 1;
            fi
            shift 2
            ;;
        start)
            action="start"
            shift;
            ;;
        stop)
            action="stop"
            shift;
            ;;
        clear)
            action="clear"
            shift;
            ;;
        help|--help|-h)
            print_help;
            shift;
            exit;
            ;;
    esac
done

function iptables_skip_init {
    action="$1";
    shift;
    if [ "$action" = "setup" ]; then
        echo "Creating '$skip_chain_name' iptables' chain.";
        sudo iptables -t mangle -N $skip_chain_name-Marker;
        sudo iptables -t mangle -N $skip_chain_name;
        sudo iptables -t mangle -A $skip_chain_name-Marker -j MARK --set-mark $iptables_mark;
        sudo iptables -t mangle -A PREROUTING -j $skip_chain_name; # For incomming packets
        sudo iptables -t mangle -A OUTPUT -j $skip_chain_name;     # For locally generated packets
    elif [ "$action" = "destroy" ]; then
        echo "Deleting '$skip_chain_name' iptables' chain.";
        sudo iptables -t mangle -D OUTPUT -j $skip_chain_name 2>/dev/null;
        sudo iptables -t mangle -D PREROUTING -j $skip_chain_name 2>/dev/null;
        sudo iptables -t mangle -D $skip_chain_name-Marker -j MARK --set-mark $iptables_mark 2>/dev/null;
        sudo iptables -t mangle -X $skip_chain_name 2>/dev/null;
        sudo iptables -t mangle -X $skip_chain_name-Marker 2>/dev/null;
    else
        echo "Unknown action '$action'";
    fi
}


function iptables_skip_finalize {
    action="$1";
    shift;
    # echo "Adding the last rule in the iptables $skip_chain_name chain.";
}

function iptables_skip {
    action="$1";
    shift;
    if [ "$action" = "setup" ]; then
        echo "Add marks in iptables for packets that match '$@'";
        sudo iptables -t mangle -A $skip_chain_name $@ -g $skip_chain_name-Marker
    elif [ "$action" = "destroy" ]; then
        echo "Remove markings for iptables rule '$@'";
        sudo iptables -t mangle -D $skip_chain_name $@ -g $skip_chain_name-Marker 2>/dev/null;
    else
        echo "Unknown action $action";
    fi
}

function accept_loopback {
    action="$1";
    shift;
    if [ "$action" = "setup" ]; then
        echo "Accept everything on loopback immediately.";
        sudo iptables -t filter -A INPUT  -i lo -j ACCEPT;
        sudo iptables -t filter -A OUTPUT -o lo -j ACCEPT;
    elif [ "$action" = "destroy" ]; then
        echo "Remove the rule for accepting everything for loopback.";
        sudo iptables -t filter -D INPUT  -i lo -j ACCEPT 2>/dev/null;
        sudo iptables -t filter -D OUTPUT -o lo -j ACCEPT 2>/dev/null;
    else
        echo "Unknown action $action";
    fi
}

function accept_local_to_local {
    action="$1";
    shift;
    if [ "$action" = "setup" ]; then
        echo "Accept local to local immediately.";
        sudo iptables -t filter -A FORWARD --source 192.168.0.0/16 --destination 192.168.0.0/16 -j ACCEPT;
    elif [ "$action" = "destroy" ]; then
        echo "Remove the rule for accepting local to local.";
        sudo iptables -t filter -D FORWARD --source 192.168.0.0/16 --destination 192.168.0.0/16 -j ACCEPT 2>/dev/null;
    else
        echo "Unknown action $action";
    fi
}

function update_countries {
    if [ -d "$countries_repo" ]; then
        echo "Updateing the countries' IPs repository.";
        git -C "$countries_repo" pull --rebase=true --prune --force --depth=1 --progress --no-ff --no-edit --no-commit
    else
        echo "Downloading the countries' IPs repository.";
        git clone --depth=1 -b master https://github.com/herrbischoff/country-ip-blocks.git "$countries_repo"
    fi;
}

function create_ignored_ipset {
    if sudo ipset --name list | grep ignore >/dev/null; then
        echo "'ignored' ipset is already created.";
        return;
    fi

    if ! sudo ipset -exist create ignored hash:net counters; then
        echo "You need to run this script as root.";
        return;
    fi;
    if [ -f "$ignored_domains_file" ]; then
        ipcount=0
        while read -r domain; do
            while IFS= read -r ip; do
                echo -ne "\r\033[KAdding ip address $ip to the 'ignored' ip set."
                sudo ipset -exist add ignored $ip;
                ipcount=$(( $ipcount + 1 ));
            done < <(dig +short +timeout=2 $domain | grep '^[.0-9]*$');
        done < "$ignored_domains_file";
        echo -ne "\r\033[KAdded $ipcount ips to the 'ignored' ip set.";
        echo
    fi;
}

function create_country_ipset {
    iso_code="$1";
    if [ -z "$iso_code" ]; then
        iso_code="$countryiso";
    fi

    if sudo ipset --name list | grep $iso_code >/dev/null; then
        echo "'$iso_code' ipset is already created.";
        return;
    fi

    update_countries || (echo failed to update countries repo);

    input="$countries_repo/ipv4/$iso_code.cidr"

    sudo ipset -exist create $iso_code hash:net counters;
    ipcount=0
    while IFS= read -r ip; do
        echo -ne "\r\033[KAdding ip address $ip to the '$iso_code' ip set."
        sudo ipset -exist add ${iso_code} $ip;
        ipcount=$(( $ipcount + 1 ));
    done < "$input";
    echo -ne "\r\033[KAdded $ipcount ips to the '$iso_code' ip set.";
    echo
}

function destroy_countries_ipset {
    iso_code="$1";
    if [ -z "$iso_code" ]; then
        iso_code="$countryiso";
    fi

    echo "Destroying country ipset of $iso_code";
    sudo ipset destroy $sio_code;
}


function skip_domains {
    iptables_skip $1 -m set --match-set ignored dst
}


function skip_country {
    iso_code="$2"
    if [ -z "$iso_code" ]; then
        iso_code="$countryiso";
    fi;
    iptables_skip $1 -m set --match-set $iso_code dst
}

function skip_multicast {
    iptables_skip $1 -m pkttype --pkt-type multicast
}

function skip_local {
    iptables_skip $1 --destination 192.168.0.0/16
}

function setup_gre {
    sudo ip tunnel add fromrouter mode gre remote $gateway local any ttl inherit
    sudo ip addr add 10.11.11.2/24 dev fromrouter 
    sudo ip link set fromrouter up
}

function remove_gre {
    sudo ip link set fromrouter down
    sudo ip tunnel del fromrouter mode gre remote $gateway local any ttl inherit
}

function nat {
    action="$1";
    shift;
    if [ "$action" = "setup" ]; then
        echo "Create iptables rules for NATting."
        sudo iptables -t nat -A POSTROUTING -m mark --mark $iptables_mark -j SNAT --to-source $local_ip;
        sudo iptables -t nat -A POSTROUTING -m mark ! --mark $iptables_mark --source 192.168.0.0/16 ! --destination 192.168.0.0/16 -j MASQUERADE
    elif [ "$action" = "destroy" ]; then
        echo "Remove iptables rules for NATting."
        sudo iptables -t nat -D POSTROUGING -m mark --mark $iptables_mark -j SNAT --to-source $local_ip 2>/dev/null
        sudo iptables -t nat -D POSTROUTING -m mark ! --mark $iptables_mark --source 192.168.0.0/16 ! --destination 192.168.0.0/16 -j MASQUERADE 2>/dev/null
    else
        echo "Unknown action $action";
    fi
}

function enable_routing {
    echo "Enable IPv4 Routing."
    sudo sysctl net.ipv4.ip_forward=1 >/dev/null
}

function disable_routing {
    echo "Disable IPv4 Routing."
    sudo sysctl net.ipv4.ip_forward=0 >/dev/null
}

# This function will download and create an ipset that holds the ip addresses of the DNS Servers
function create_dnsips_ipset {
    if sudo ipset --name list | grep dnsips >/dev/null; then
        echo "'dnsips' ipset is already created.";
        return;
    fi

    # rm -f "$dnsips_file"; # might be broken
    if [ ! -f "$dnsips_file" ]; then
        wget -O "$dnsips_file" "$dnsips_url";
    fi

    # Health check
    if [ ! -f "$dnsips_file" ]; then
        echo "Could not download $dnsips_file. Retry again.";
        exit 1;
    fi

    if ! sudo ipset -exist create dnsips hash:ip counters; then
        echo "Try running this file with sudo.";
        exit 1;
    fi

    ipcount=0
    echo
    while read -r ip; do
        echo -ne "\r\033[KAdding ip address $ip to the 'dnsips' ip set."
        sudo ipset -exist add dnsips $ip;
        ipcount=$(( $ipcount + 1 ));
    done < <(grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" "$dnsips_file");
    echo -ne "\r\033[KAdded $ipcount ips to the 'dnsips' ip set.";
    echo
}

function skip_dnsips {
    # iptables_skip $1 -p tcp -m multiport --dports http,https ! --destination 192.168.0.0/16 -m set ! --match-set unfilter dst
    iptables_skip $1 -p udp --dport 53 -m set --match-set dnsips dst
}

function destroy_dnsips {
    skip_dnsips destroy;
    # sudo ipset destroy dnsips;
}

function skip_all_except_banned {
    # iptables_skip $1 ! --destination $local_ip -m set ! --match-set unfilter dst
    return;
}


function clean {
    accept_loopback destroy
    accept_local_to_local destroy

    skip_multicast destroy
    skip_local destroy
    skip_country destroy
    skip_domains destroy
    skip_dnsips destroy
    skip_all_except_banned destroy
    iptables_skip_init destroy

    destroy_dnsips

    nat destroy
    disable_routing
}

function start {
    enable_routing

    accept_loopback destroy
    accept_loopback setup
    accept_local_to_local destroy
    accept_local_to_local setup

    skip_multicast destroy
    skip_local destroy
    skip_country destroy
    skip_domains destroy
    skip_dnsips destroy
    skip_all_except_banned destroy

    iptables_skip_init destroy
    iptables_skip_init setup

    nat destroy
    nat setup

    create_dnsips_ipset
    create_country_ipset
    create_ignored_ipset

    skip_local setup
    skip_country setup
    skip_domains setup
    skip_dnsips setup
    skip_multicast setup
    skip_all_except_banned setup
    iptables_skip_finalize # should be the last of the "skip" calls
}

case $action in
    start)
        start
        ;;
    stop|clean|clear)
        clean
        ;;
    print_help)
        print_help
        ;;
    *)
        echo "Unknown action '$action'.";
        ;;
esac

