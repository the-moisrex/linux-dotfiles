#!/bin/bash

checked_domains_file="$HOME/.config/firewall/403-checked-domains.txt"
forbidden_domains_file="$HOME/.config/firewall/403-forbidden-domains.txt"
excluded_domains_file="$HOME/.config/firewall/403-excluded-domains.txt"

dnsmasq_config_file="/etc/dnsmasq.d/403.conf"

dns1="10.202.10.202"
dns2="10.202.10.102"

if ! command -v dig >/dev/null; then
    echo "The command 'dig' is not installed.";
    exit 1;
fi

if ! command -v tshark >/dev/null; then
    echo "The command 'tshark' is not installed; install Wireshark to fix this.";
    exit 1;
fi

if ! command -v sponge >/dev/null; then
    echo "The command 'sponge' is not installed; it should be included in the 'moreutils' package.";
    exit 1;
fi

function print_help {
    echo "This script will let you keep a list of domains that are forbidden to use in your reigon, and"
    echo " lets you use the specified DNS Server to be used for those specific domains."
    echo
    echo "Attention: this script doesn't mean we support 'Categorization of the Internet'"
    echo " (it's okay if you don't know what I'm talking about!)."
    echo
    echo "Usage:"
    echo "403 help"
    echo "    start"
    echo "    list forbidden              # Forbidden"
    echo "    list checked                # Checked domains"
    echo "    list excluded               # Excluded domains"
    echo "    follow                      # Forbidden"
    echo "    follow checked              # Checked domains"
    echo "    follow excluded             # Excluded domains"
    echo "    dnsmasq update              # Update dnsmasq configs at $dnsmasq_config_file"
    echo "    dnsmasq reset               # Reset dnsmasq configs at $dnsmasq_config_file"
    echo "    add [domain]                # Add a domain"
    echo "    remove [domain]             # Remove a domain"
    echo "    remove excluded [domain]    # Remove an excluded domain"
    echo "    exclude [domain]            # Exclude a domain from being re-checked + remove it"
    echo "    clear-checked               # Clear checked list of domains"
    echo "    clear-forbidden             # Clear forbidden list of domain"
    echo "    check [domain]              # Check the domain"
    echo "    re-check [[domain]]         # Re-Check the domain (or all checked domains)"
    echo "    re-check forbidden          # Re-Check the forbidden domain"
    echo "    re-check checked            # Re-Check the checked domain"
}


function is_403 {
    domain="$1"
    res=$(dig @$dns1 +noidnin +noidnout +nocmd +noall +answer +timeout=3 "$domain");
    if [[ $? -eq 0 ]]; then
        if [ -z "$res" ]; then
            return 1;
        fi
        if echo "$res" | grep -sq "10.10.34.35"; then
            return 2;
        fi
        if echo "$res" | grep -sq "10.10.34.36"; then
            return 2;
        fi
        if ! echo "$res" | grep -sq "CNAME"; then
            return 5;
        fi
        if echo "$res" | grep -sqE "10\\.[0-9]{,3}\\.[0-9]{,3}\\.[0-9]{,3}"; then # check if it's a 10.0.0.0/8
            return 0;
        else
            return 3;
        fi
    else
        return 4;
    fi
}

function recheck_domain {
    domain="$1"
    if [ -z "${domain// }" ]; then
        echo "405 Empty Domain."
        return;
    fi

    if ! echo "$domain" | grep -sqP '(?=^.{4,253}$)(^(?:[a-zA-Z0-9_\-](?:(?:[a-zA-Z0-9\-_]){0,61}[a-zA-Z0-9\-_])?\.)*([a-zA-Z0-9\-_]{2,}|xn--[a-zA-Z0-9_\-][a-zA-Z0-9\-_]*[a-zA-Z0-9\-_])$)'; then
        echo "405 $domain Not a valid domain";
        return;
    fi

    # Original FQDN
    # '(?=^.{4,253}$)(^(?:[a-zA-Z0-9](?:(?:[a-zA-Z0-9\-]){0,61}[a-zA-Z0-9])?\.)+([a-zA-Z]{2,}|xn--[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])$)'

    if grep -sq "$domain" "$excluded_domains_file"; then
        echo "400 $domain is marked to be excluded."
        return;
    fi
    is_403 "$domain";
    code=$?
    if [[ $code -eq 0 ]]; then
        echo "403 $domain";
        grep -sv "$domain" "$forbidden_domains_file" | sponge "$forbidden_domains_file"
        echo "$domain" >> "$forbidden_domains_file";
    elif [[ $code -eq 2 ]]; then
        echo "201 $domain Blobked by Gov."
    elif [[ $code -eq 3 ]]; then
        echo "200 $domain Normal domain."
    elif [[ $code -eq 4 ]]; then
        echo "500 $domain Network issue."
        return;
    elif [[ $code -eq 1 ]]; then
        echo "404 $domain Not found."
    elif [[ $code -eq 5 ]]; then
        echo "200 $domain No CNAME."
    else
        echo "200 $domain Uknown!!!";
    fi
    if ! grep -sq "$domain" "$checked_domains_file"; then
        echo "$domain" >> "$checked_domains_file"
    fi
}

last_domain=""
function check_domain {
    domain="$1"
    if [ "$domain" == "$last_domain" ]; then
        return;
    fi
    if [ -z "${domain// }" ]; then
        # echo "405 Empty Domain."
        return;
    fi
    last_domain="$domain"

    if ! echo "$domain" | grep -sqP '(?=^.{4,253}$)(^(?:[a-zA-Z0-9_\-](?:(?:[a-zA-Z0-9\-_]){0,61}[a-zA-Z0-9\-_])?\.)*([a-zA-Z0-9\-_]{2,}|xn--[a-zA-Z0-9_\-][a-zA-Z0-9\-_]*[a-zA-Z0-9\-_])$)'; then
        echo "405 $domain Not a valid domain";
        return;
    fi

    if grep -sq "$domain" "$checked_domains_file"; then
        echo "100 $domain Already Checked."
    else
        recheck_domain "$domain"
    fi
}

function capture_domains {
    while read -r domain; do
        check_domain "$domain";
    done < <(tshark -i any -n -f "port 53 and !(host $dns1) and !(host $dns2)" -Y '(dns.qry.name or dns.flags.response eq 0) and !_ws.malformed' -T fields -e dns.qry.name -l 2>/dev/null)
}

function update_dnsmasq_configs {
    sudo rm -f "$dnsmasq_config_file";
    while read -r domain; do
        echo "server=/$domain/$dns1" | sudo tee -a "$dnsmasq_config_file";
    done < <(cat "$forbidden_domains_file");
    sudo systemctl restart dnsmasq.service;
}

function list_forbidden_domains {
    cat "$forbidden_domains_file";
}

function list_checked_domains {
    cat "$checked_domains_file";
}

function list_excluded_domains {
    cat "$excluded_domains_file";
}

function follow_forbidden_domains {
    tail -f "$forbidden_domains_file";
}

function follow_checked_domains {
    tail -f "$checked_domains_file";
}

function follow_excluded_domains {
    tail -f "$excluded_domains_file";
}

function add_domain {
    domain="$1";
    if ! grep -sq "$domain" "$forbidden_domains_file"; then
        echo "$domain" >> "$forbidden_domains_file"
    fi
    if ! grep -sq "$domain" "$checked_domains_file"; then
        echo "$domain" >> "$checked_domains_file"
    fi
}

function remove_domain {
    domain="$1";
    grep -sv "$domain" "$forbidden_domains_file" | sponge "$forbidden_domains_file"
    grep -sv "$domain" "$checked_domains_file" | sponge "$checked_domains_file"
}

function remove_excluded_domain {
    domain="$1";
    grep -sv "$domain" "$excluded_domains_file" | sponge "$excluded_domains_file"
}

function exclude_domain {
    domain="$1";
    remove_domain "$1";
    grep -sv "$domain" "$excluded_domains_file" | sponge "$excluded_domains_file"
    echo "$domain" >> "$excluded_domains_file";
}

function recheck_all_domains {
    domains=$(cat "$checked_domains_file" "$forbidden_domains_file" | sort -u);
    mv "$checked_domains_file" "$checked_domains_file.old"
    mv "$forbidden_domains_file" "$forbidden_domains_file.old"
    while read -r domain; do
        recheck_domain "$domain";
    done < <(echo -n "$domains");
    rm -f "$checked_domains_file.old"
    rm -f "$forbidden_domains_file.old"
}

function recheck_forbidden_domains {
    domains=$(cat "$forbidden_domains_file" | sort -u);
    mv "$forbidden_domains_file" "$forbidden_domains_file.old"
    while read -r domain; do
        recheck_domain "$domain";
    done < <(echo -n "$domains");
    rm -f "$forbidden_domains_file.old"
}


function recheck_checked_domains {
    domains=$(cat "$checked_domains_file" | sort -u);
    mv "$checked_domains_file" "$checked_domains_file.old"
    while read -r domain; do
        recheck_domain "$domain";
    done < <(echo -n "$domains");
    rm -f "$checked_domains_file.old"
}


case $1 in
    start)
        capture_domains;
        ;;
    help)
        print_help;
        ;;
    dnsmasq)
        case $2 in
            update)
                update_dnsmasq_configs;
                ;;
            reset)
                sudo rm -f "$dnsmasq_config_file";
                ;;
        esac
        ;;
    check)
        check_domain "$2";
        ;;
    list)
        case $2 in
            forbidden)
                list_forbidden_domains;
                ;;
            checked)
                list_checked_domains;
                ;;
            excluded)
                list_excluded_domains;
                ;;
            *)
                list_forbidden_domains;
                ;;
        esac
        ;;
    follow)
        case $2 in
            forbidden)
                follow_forbidden_domains;
                ;;
            checked)
                follow_checked_domains;
                ;;
            excluded)
                follow_excluded_domains;
                ;;
            *)
                follow_forbidden_domains;
                ;;
        esac
        ;;
    add)
        add_domain "$2";
        ;;
    remove)
        case $2 in
            excluded|ex|exclude)
                remove_excluded_domain "$3";
                ;;
            *)
                remove_domain "$2";
                ;;
        esac
        ;;
    exclude)
        exclude_domain "$2";
        ;;
    clear-checked)
        rm -f "$checked_domains_file";
        ;;
    clear-forbidden)
        rm -f "$forbidden_domains_file";
        ;;
    recheck|re-check)
        case $2 in
            forbidden)
                recheck_forbidden_domains;
                ;;
            checked)
                recheck_checked_domains;
                ;;
            *)
                if [ ! -z "$2" ]; then
                    recheck_domain "$2";
                else
                    recheck_all_domains;
                fi
                ;;
        esac
        ;;
    *)
        print_help;
        ;;
esac
