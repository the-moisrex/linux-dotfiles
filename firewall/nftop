#!/usr/bin/env python3
"""NFTop Module

main:
    calling the main function
"""

import sys
import time
import getopt
import math
import curses
from nftables import Nftables
from nftables import json


def convert_size(size_bytes):
    """Convert the sizes"""
    if size_bytes == 0:
        return 0, "B"
    size_name = ("B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB")
    i = int(math.floor(math.log(size_bytes, 1024)))
    powered = math.pow(1024, i)
    size = round(size_bytes / powered, 2)
    return size, size_name[i]


class PerSecond:
    """Calculate Time per second"""
    def __init__(self):
        self.counters = {}

    def tick(self, counter_name, new_bytes_count):
        """Set a new tick and get the bytes/sec value"""
        new_time = int(time.time() * 1000)  # in milliseconds
        if counter_name not in self.counters:
            self.counters[counter_name] = [(new_time, new_bytes_count)]
            return 0
        self.counters[counter_name].append((new_time, new_bytes_count))
        while True:
            old_time, bytes_count = self.counters[counter_name][0]
            tdiff = new_time - old_time
            if tdiff >= 1000:
                self.counters[counter_name].pop(0)
            else:
                break
        return new_bytes_count - bytes_count

    def clear(self):
        """clear"""
        self.counters = []


class MyNFTable:
    """NFTable class"""
    def __init__(self):
        """NFTable ctor"""
        self.nft = Nftables()
        self.nft.set_json_output(True)
        self.bpsec = None

    def enable_bpsec(self):
        """Enable the column"""
        self.bpsec = PerSecond()

    def get_header(self):
        """Get the header in 2 lines"""
        if self.bpsec is not None:
            return (f"{'Counter Name':>21}  {'B/Sec':>10}  {'Size':>10}"
                    f"  {'in Bytes':>17}  {'Packets':>12}\n"
                    f" {'':->20}  {'':->10}  {'':->10}  {'':->17}  "
                    f"{'':->12}\n")
        return (f"{'Counter Name':>21}  {'Packets':>12}  {'Size':>10}"
                f"  {'in Bytes':>17}\n"
                f" {'':->20}  {'':->10}  {'':->17}  {'':->12}\n")

    def get_body(self, res=""):
        """Get table body"""
        _, output, _ = self.nft.cmd("list counters")
        if output == "":
            return "Please run as root."
        j = json.loads(output)
        for i in range(1, len(j['nftables'])):
            counter = j['nftables'][i]["counter"]
            packets = counter["packets"]
            name = counter["name"]
            bsize = counter["bytes"]
            count, count_unit = convert_size(bsize)
            if self.bpsec is not None:
                bsec, best_unit = convert_size(self.bpsec.tick(name, bsize))
                res = (res + f"{name:>21}  {count:>6.1f} {count_unit:<3}  "
                             f"{bsec:>6.1f} {best_unit:<3}  "
                             f"{bsize:>17,}  {packets:>12,}"
                             f"\n")
            else:
                res = (res + f"{name:>21}  {count:>6.1f} {count_unit:<3}  "
                             f"{bsize:>17,}  {packets:>12,}\n")
        return res

    def get_table(self):
        """Get table"""
        res = self.get_header()
        return self.get_body(res)


class ScreenWriter:
    """Keeps Writing to the screen"""

    def __init__(self, stdscr):
        self.stdscr = stdscr
        self.timeout = 100
        self.step = 50
        curses.use_default_colors()
        self.stdscr.nodelay(True)
        self.stdscr.timeout(self.timeout)
        self.nft = MyNFTable()
        self.nft.enable_bpsec()

    def set_refresh_time(self, sign):
        """Change the refresh time; sign = +/-1"""
        if self.timeout < 100:
            self.step = 10
        elif self.timeout < 1000:
            self.step = 50
        else:
            self.step = 200
        self.step = self.step * sign
        new_timeout = self.timeout + self.step
        self.timeout = max(10, min(new_timeout, 10000 - self.step))
        self.stdscr.timeout(self.timeout)
        self.stdscr.addstr(0, 58, f"Refresh time:{str(self.timeout):>4} ms")

    def tick(self):
        """Draw the body and wait for the user inputs"""
        ich = self.stdscr.getch()
        # self.stdscr.addstr(0, 40, str(ich))
        if ich == 113:  # char: q
            return False  # Exit
        if ich == 43:   # char: +
            self.set_refresh_time(1)
        elif ich == 45:   # char: -
            self.set_refresh_time(-1)
        elif ich == 32:   # char: space
            return True
        elif ich == 99:   # char: c
            self.print_header()
        self.print_body()
        return True

    def print_header(self):
        """Print the header"""
        self.stdscr.clear()
        self.stdscr.addstr(0, 1, "NFTop Author: Mohammad Bahoosh")
        self.stdscr.addstr(2, 0, self.nft.get_header())
        self.set_refresh_time(0)

    def print_body(self):
        """Print the body"""
        self.stdscr.addstr(4, 0, self.nft.get_body())

    def run(self):
        """Run the loop"""
        try:
            while True:
                try:
                    self.print_header()
                    self.print_body()
                    while True:
                        if not self.tick():
                            return
                except curses.error:
                    self.stdscr.clear()
                    try:
                        self.stdscr.addstr(0, 0, "Terminal too small")
                        self.stdscr.getch()
                    except curses.error:
                        return  # exit
                except ValueError:
                    self.stdscr.clear()
                    try:
                        self.stdscr.addstr(0, 0, "Paused!")
                        self.stdscr.getch()
                    except curses.error:
                        return  # exit
        except KeyboardInterrupt:
            pass  # nothing to do, exit


def printer(stdscr):
    """Keep Printing"""
    writer = ScreenWriter(stdscr)
    writer.run()


if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], "f")
    except getopt.GetoptError:
        print("nftop -f")
        sys.exit(1)
    for opt, arg in opts:
        if opt == '-f':
            curses.wrapper(printer)
            break
    else:
        print(MyNFTable().get_table())
