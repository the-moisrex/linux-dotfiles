#!/usr/bin/env python3
"""NFTop Module

main:
    calling the main function
"""

import sys
import getopt
import math
import curses
from nftables import Nftables
from nftables import json


def convert_size(size_bytes):
    """Convert the sizes"""
    if size_bytes == 0:
        return 0, "B"
    size_name = ("B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB")
    i = int(math.floor(math.log(size_bytes, 1024)))
    powered = math.pow(1024, i)
    size = round(size_bytes / powered, 2)
    return size, size_name[i]


class MyNFTable:
    """NFTable class"""
    def __init__(self):
        """NFTable ctor"""
        self.nft = Nftables()
        self.nft.set_json_output(True)

    def get_header(self):
        """Get the header in 2 lines"""
        return (f"{'Counter Name':>25}  {'Size':>10}"
                f"  {'in Bytes':>17}  {'Packets':>10}\n"
                f" {'':->24}  {'':->10}  {'':->17}  {'':->10}\n")

    def get_body(self, res=""):
        """Get table body"""
        _, output, _ = self.nft.cmd("list counters")
        if output == "":
            return "Please run as root."
        j = json.loads(output)
        for i in range(1, len(j['nftables'])):
            counter = j['nftables'][i]["counter"]
            packets = counter["packets"]
            name = counter["name"]
            counter_bytes = counter["bytes"]
            count, count_name = convert_size(counter_bytes)
            res = (res + f"{name:>25}  {count:>6.1f} {count_name:<3}  "
                         f"{counter_bytes:>17,}  {packets:>10,}\n")
        return res

    def get_table(self):
        """Get table"""
        res = self.get_header()
        return self.get_body(res)


def printer(stdscr):
    """Keep Printing"""
    # Clear screen
    stdscr.clear()
    curses.use_default_colors()
    stdscr.nodelay(True)
    stdscr.timeout(100)
    nft = MyNFTable()
    stdscr.addstr(0, 1, "nftop author: Mohammad Bahoosh")
    stdscr.addstr(1, 0, nft.get_header())
    while True:
        stdscr.addstr(3, 0, nft.get_body())
        if stdscr.getch() >= 0:
            break


if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], "f")
    except getopt.GetoptError:
        print("nftop -f")
        sys.exit(1)
    for opt, arg in opts:
        if opt == '-f':
            curses.wrapper(printer)
            break
    else:
        print(MyNFTable().get_table())
