#!/bin/bash

cached_file="/tmp/checked-domains";
bad_dns_server="85.15.1.15";
# ipset="unfilter"

# sudo ipset -exist create $ipset hash:ip counters timeout 0;

touch $cached_file;

function add_ip {
    local ip="$1";
    case $ip in
        192.168.*|10.*|0.0.0.0)
            return;
            ;;
        *)
            sudo nft add element inet mangle ignored \{ "$ip" \};
            # sudo ipset -exist add $ipset $ip;
            echo "Added $ip to 'inet mangle ignored'.";
            ;;
    esac;
}

function add_domain {
    local domain="$1"
    domain="${domain/http:\/\//}"
    domain="${domain/https:\/\//}"
    while read -r ip; do
        add_ip "$ip";
    done < <(dig +short +timeout=2 "$domain" | grep '^[.0-9]*$');
}

function add_domains {
    domains="$1";
    first_good_domain=""
    for domain in ${domains//,/ }; do
        if [ "$domain" = "<Root>" ]; then
            continue;
        fi;
        domain="${domain/http:\/\//}"
        domain="${domain/https:\/\//}"
        if [ -z "$first_good_domain" ]; then
            echo -n "For domains ";
            first_good_domain="$domain";
        fi
        echo "$domain" >> $cached_file;
        echo -en "\t$domain";
    done;
    
    # Domains have the same ip addresses, so one of them is enough
    if [ ! -z "$first_good_domain" ]; then
        echo;
        add_domain "$domain";
    fi;
}

function check_domain {
    local domain="$1";
    local ips="$2";
    domain="${domain/http:\/\//}"
    domain="${domain/https:\/\//}"
    # if [[ ! $domain =~ ^(([[:alpha:]](-?[[:alnum:]])*)\.)+[[:alpha:]]{2,}$ ]]; then
    #     echo -ne "\r\033[KNot a domain: $domain"
    #     return;
    # fi
    case $domain in
        *.local)
            echo -ne "\r\033[KSkip $domain"
            return;
            ;;
        *)
            ;;
    esac;
    if grep "$domain" "$cached_file" >/dev/null; then
        echo -ne "\r\033[KSkip $domain"
        return;
    fi

    echo "$domain" >> $cached_file

    echo -ne "\r\033[KChecking $domain"
    dig +short +timeout=2 "$domain" @${bad_dns_server} | grep 10.10. >/dev/null
    isbanned=$?
    if [ $isbanned != 0 ]; then
        echo -ne "\r\033[KIs not blocked: $domain"
        return;
    fi;
    echo -ne "\r\033[KFor domain $domain\n";
    if [ -z "$ips" ]; then
        add_domain "$domain";
    else
        for ip in ${ips//,/ }; do
            add_ip "$ip";
        done;
    fi;
}


function check_domains {
    domains="$1";
    ips="$2"
    for domain in ${domains//,/ }; do
        if [ "$domain" = "<Root>" ]; then
            continue;
        fi;
        check_domain "$domain" "$ips";
    done;
}


if [ "$1" = "check-all" ]; then
    while read -r domain; do
        domain=$(echo $domain | sed -e 's/[[:space:]]//');
        if [ "$domain" = "error" ] || [ "$domain" = "." ] || [ "$domain" = "https" ]; then
            continue;
        fi
        check_domain "$domain"
    done < <(cat /var/log/dnsmasq.log | cut -d":" -f4 | sed -E 's/ (reply|forwarded|cached|query\[[=A-Za-z0-9]+\]) //' | cut -d" " -f 1 | awk NF | sort -u)
fi;

if [ "$1" = "check-dnsmasq" ]; then
    while read -r domain; do
        domain=$(echo "$domain" | sed -e 's/[[:space:]]//');
        if [ "$domain" = "error" ] || [ "$domain" = "." ] || [ "$domain" = "https" ]; then
            continue;
        fi
        check_domain "$domain"
    done < <(tail -F -n0 /var/log/dnsmasq.log | unbuffer -p cut -d":" -f4 | unbuffer -p sed -E 's/ (reply|forwarded|cached|query\[[=A-Za-z0-9]+\]) //' | unbuffer -p cut -d" " -f 1 | unbuffer -p awk NF | unbuffer -p uniq)
fi

if [ "$1" = "check-tshark" ]; then
    while IFS='|' read -r queries responses ips; do
        if [ "$queries" = "<Unknown extended label>" ]; then
            continue;
        fi
        for ip in ${ips//,/ }; do
            if [[ $ip =~ ^10\.10\. ]]; then
                # We know it's blocked, let's add the domains
                add_domains "$queries";
                add_domains "$responses";
                continue 2;
            fi;
        done

        # check the domains
        check_domains "$queries" "$ips";
        check_domains "$responses" "$ips";
    done < <(tshark -i any -l -f 'udp and (dst port 53 or src port 53)' -Y 'dns.qry.name' -T fields -E separator='|' -e dns.qry.name -e dns.resp.name -e dns.a 2>/dev/null)
fi
