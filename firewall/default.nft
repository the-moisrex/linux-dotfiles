#!/usr/bin/env -S nft.prepare.script

# to monitor logs use this command:
#   $ journalctl -k -t kernel -g 'nft#' --follow

define local_network   = { 192.168.0.0/16, 169.254.0.0/16, 127.0.0.0/8, 10.0.0.0/8 }
define skip_vpn_mark   = 0xe1f1 # NordVPN default vpn mark used in iproute2
define accepted_fwmark = 0xe5ff # Accepted packets' mark; used for tor load balancing scripts
define lo_v2ray_fwmark = 0xff   # Directly connect SO_MARK to 0xff traffic (0xff is a hexadecimal number, numerically equivalent to 255), the purpose of this rule is to avoid proxy loopback with local (gateway) traffic
define multicast_ips   = 224.0.0.0-239.255.255.255
define public_ipv4     = {
    1.0.0.0-9.255.255.255,
    11.0.0.0-100.63.255.255,
    100.128.0.0-126.255.255.255,
    128.0.0.0-169.253.255.255,
    169.255.0.0-172.15.255.255,
    172.32.0.0-191.255.255.255,
    192.0.1.0/24,
    192.0.3.0-192.88.98.255,
    192.88.100.0-192.167.255.255,
    192.169.0.0-198.17.255.255,
    198.20.0.0-198.51.99.255,
    198.51.101.0-203.0.112.255,
    203.0.114.0-223.255.255.255
}

# flush ruleset

table netdev filter {
    counter ingress.drop { comment "Ingress dropped" }

    # Source: https://wiki.gentoo.org/wiki/Nftables
    # Broken packets should be rejected early which requires an ingress hook for family netdev.
    # This sets up a chain that acts for a dedicated network device before packets enter further processing â€“ improved performance.
    chain ingress {

        # Drop all fragments.
        ip frag-off & 0x1fff != 0 counter name ingress.drop drop;

        # Drop XMAS packets.
        tcp flags & (fin|syn|rst|psh|ack|urg) == (fin|syn|rst|psh|ack|urg) counter name ingress.drop drop

        # Drop NULL packets.
        tcp flags & (fin|syn|rst|psh|ack|urg) == 0x0 counter name ingress.drop drop;

        # Drop uncommon MSS values.
        tcp flags syn tcp option maxseg size 1-535 counter name ingress.drop drop;
    }

    chain ingress.enp {
        type filter hook ingress devices = $iface_devices priority -500;
        goto ingress;
    }
}


table inet filter {
    counter everything { comment "All IN/OUT" }
    counter all.in { comment "All IN" }
    counter all.out { comment "All OUT" }
    counter local { comment "All Local IN/OUT" }
    counter local.in { comment "All Local IN" }
    counter local.out { comment "All Local Out"}
    counter internet { comment "All Non-Local IN/OUT" }
    counter internet.in { comment "All Non-Local IN" }
    counter internet.out { comment "All Non-Local Out"}
    counter filter.loopback { comment "Loopback" }
    counter filter.established { comment "Established, Related connection states" }
    counter filter.invalid { comment "Invalid connection states" }
    counter filter.protocols { comment "Allowed protocols" }
    counter filter.marked { comment "Marked previously accepted" }
    counter filter.broadcast { comment "Broadcast" }
    # counter filter.igmp { comment "IGMP" }
    counter filter.dhcp { comment "DHCP/bootp" }
    counter filter.icmp { comment "IP ICMP" }
    counter filter.drop { comment "Packets that weren't allowed" }
    counter forward.all { comment "Forward To/From Local Network from anywhere" }
    counter forward.download { comment "Forward To Local Network from anywhere" }
    counter forward.upload { comment "Forward From Local Network to anywhere" }
    counter forward.drop { comment "Forward dropped" }
    counter forward.established { comment "Established connections" }
    counter forward.offload { comment "Established connections" }

    set protocols {
        type inet_proto . inet_service
        flags interval
        counter
        elements = {
            udp . 67,            # DHCP
            udp . smtp,          # Mail Server for router
            udp . pop3,          # Mail Server for phone
            udp . imap3,         # email
            udp . pop3s,         # email
            udp . rsync,         # rsync command
            udp . sftp,          # Files
            udp . domain,        # DNS
            udp . ssh,
            udp . rfb,           # VNC
            udp . ms-wbt-server, # RDP
            udp . 1714-1765,     # kdeconnect
            udp . 5353,          # mDNS
            tcp . 4713,          # PULSE_SERVER=tcp:machine:4713 allow input audio
            tcp . 1714-1765,     # kdeconnect
            tcp . 5353,          # mDNS
            tcp . imap,          # email
            tcp . imaps,         # email
            tcp . smtp,          # Mail Server for router
            tcp . pop3,          # Mail Server for phone
            tcp . imap3,         # email
            tcp . pop3s,         # email
            tcp . rsync,         # rsync command
            tcp . sftp,          # Files
            tcp . domain,        # DNS
            tcp . ssh,
            tcp . rfb,           # VNC
            tcp . ms-wbt-server, # RDP
            sctp . ssh,
            tcp . 10240,         # compiler-explorer
            udp . 5678,          # (MNDP) Mikrotik Neighbor Discovery Protocol
            tcp . 8291,          # Winbox
            tcp . netbios-ns,    # netbios name service
            udp . netbios-ns,    # netbios name service
            tcp . netbios-dgm,   # netbios datagram service
            udp . netbios-dgm,   # netbios datagram service
            tcp . netbios-ssn,   # netbios session service
            udp . netbios-ssn,   # netbios session service
            tcp . microsoft-ds,  # SMB
            udp . microsoft-ds,  # SMB
            tcp . 9550,          # Tor Load Balancer script (net.tor)
            tcp . 9555,          # Tor Load Balancer script (tproxy2socks)
            tcp . 1089,          # v2ray Socks5
            tcp . 8889,          # v2ray HTTP
            tcp . 8088,          # v2ray Browser Forwarder
            udp . 8999,          # v2ray tproxying custom port
            tcp . 8999           # v2ray tproxying custom port
        }
        # udp . 5246,                   CAPsMAN
        # udp . 5247,                   CAPsMAN
        # udp . 20561,                  MAC Winbox
    }

    flowtable fast {
        hook ingress priority 0;
        devices = $iface_devices;
    }

    chain inbound {
        type filter hook prerouting priority raw
        policy accept
        counter name everything
        counter name all.in
        iif lo oif lo accept
        ip saddr $local_network counter name local counter name local.in accept
        ip saddr $public_ipv4 counter name internet counter name internet.in
    }

    chain outbound {
        type filter hook postrouting priority 300
        policy accept
        counter name everything
        counter name all.out
        iif lo oif lo accept
        ip daddr $local_network counter name local counter name local.out accept
        ip daddr $public_ipv4 counter name internet.out counter name internet
    }

    chain input {
        type filter hook input priority filter
        policy drop

        iif lo counter name filter.loopback accept comment "allow loopback"
        ct state {
            established,
            related
        } counter name filter.established accept
        ct state invalid counter name filter.invalid drop

        # iif != lo ip daddr 127.0.0.1/8 counter drop comment "drop connections to loopback not comming from loopback"
        # iif != lo ip6 daddr ::1/128 counter drop comment "drop connections to loopback not comming from loopback"

        ip saddr $local_network meta l4proto . th dport @protocols counter name filter.protocols accept comment "allow ports"

        ip protocol icmp counter name filter.icmp accept comment "allow ICMP"
        ip6 nexthdr icmpv6 counter name filter.icmp accept comment "allow ICMPv6"

        # DHCP
        ip saddr 0.0.0.0 ip daddr 255.255.255.255 udp dport bootps counter name filter.dhcp accept
        ip6 saddr fe80::/64 counter name filter.dhcp accept


        # ip protocol igmp counter name filter.igmp accept comment "allow IGMP"
        ip daddr $multicast_ips counter name filter.broadcast accept comment "allow multicast ips (for winbox)"
        ip daddr 255.255.255.255 counter name filter.broadcast accept comment "allow broadcast"

        # pkttype host limit rate 5/second counter name filter.ratelimit reject with icmpx type admin-prohibited comment "rate limit"

        meta mark $accepted_fwmark counter name filter.marked accept;

        # Accept packets that are marked by the "v2rayA" firewall rules
        meta mark 0x40 counter name filter.marked accept;
        meta mark 0x80 counter name filter.marked accept;

        counter name filter.drop log flags all prefix "nft#in-dropped " comment "count dropped packets"
    }

    chain forward {
        type filter hook forward priority filter
        policy drop

        ip saddr $local_network ip daddr $local_network counter name forward.offload counter name forward.all flow offload @fast;

        ct state { established, related } counter name forward.established counter name forward.all accept;
        ct state invalid counter name forward.drop;

        # DHCP
        ip saddr 0.0.0.0 ip daddr 255.255.255.255 udp dport bootps counter name filter.dhcp counter name forward.all accept
        ip6 saddr fe80::/64 counter name filter.dhcp counter name forward.all accept
        
        ip saddr $local_network counter name forward.upload counter name forward.all accept comment "from local network"
        ip daddr $local_network counter name forward.download counter name forward.all accept comment "to local network"

        counter name forward.drop log flags all prefix "nft#forward-dropped " comment "count dropped packets"
    }
}

table inet mangle {
    counter skip.marked { comment "All packets that skipped the VPN" }
    counter skip.manuals { comment "Manually specified IPs that skipped the VPN" }
    counter skip.ignored { comment "IPs of domain names that got to skip the VPN" }
    counter skip.geoips4 { comment "IPs of countries" }
    counter skip.multicast { comment "Multicast IPs that marked to skip VPN" }
    counter skip.broadcast { comment "Broadcast IPs that marked to skip VPN" }
    counter skip.dns { comment "DNSCrypt skipped" }
    counter skip.never { comment "Never Skip these IPs" }

    # Country IPs go here
    set geoips4 {
        type ipv4_addr
        auto-merge
        flags interval # enable CIDR and ranges
    }

    # Country IPs go here, but they're never ignored
    set nevergeoips4 {
        type ipv4_addr
        auto-merge
        flags interval # enable CIDR and ranges
    }

    # Ignored set of IPs of domain names
    set ignored {
        typeof ip daddr
        flags interval
        auto-merge # merge ip intervals together, and don't give error
    }

    # Never ignore these IPs of domain names
    set neverignored {
        typeof ip daddr
    }

    # Manual list of IPs/CIDRs to ignore
    set skipips {
        type ipv4_addr
        auto-merge
        flags interval # enable CIDR and ranges
        elements = {
            $multicast_ips
        }
    }

    chain marker {
        # This is the chain that defines how the packets that are
        # supposed to not go through the VPN is going to not go to VPN
        #
        # Currently, we just mark the packet
        counter name skip.marked mark set $skip_vpn_mark
    }

    chain skipper {
        # Here we define the packets that should be skip the VPN
        ip daddr $local_network return
        ip daddr @neverignored counter name skip.never return
        ip daddr @nevergeoips4 counter name skip.never return
        ip daddr @skipips counter name skip.manuals goto marker
        ip daddr @ignored counter name skip.ignored goto marker
        ip daddr @geoips4 counter name skip.geoips4 goto marker
        @if-user(dnsmasq) skuid dnsmasq counter name skip.dns goto marker
        @if-user(dnscrypt-proxy) skuid dnscrypt-proxy counter name skip.dns goto marker
        @if-user(avahi) skuid avahi goto marker
        @if-user(dovecot) skuid dovecot goto marker
        @if-user(tor) skuid tor goto marker
        @if-group(v2ray) skgid v2ray goto marker
        meta pkttype multicast counter name skip.multicast goto marker
        meta pkttype broadcast counter name skip.broadcast goto marker
    }

    # chain ingress {
    #     type filter hook ingress device enp2s0 priority raw
    #     goto skipper
    # }

    chain prerouting {
        type filter hook prerouting priority raw
        policy accept

        jump skipper
    }

    chain output {
        type route hook output priority raw
        policy accept;

        jump skipper
    }
}

table inet nat {
    counter nat.masquerade { comment "NAT performed on them" }
    counter nat.skip { comment "NAT performed marked packets" }
    # counter nat.dns.hijack { comment "Hijack DNS to localhost" }

    chain prerouting {
        type nat hook prerouting priority dstnat
        policy accept

        # Hijack the DNS Queries
        # ip protocol { udp, tcp } th dport 53 ip daddr != $local_network counter name nat.dns.hijack dnat ip to $gateway_router comment "Hijack DNS"
    }

    chain input {
        type nat hook input priority filter
    }

    chain output {
        type nat hook output priority filter
    }

    chain postrouting {
        type nat hook postrouting priority srcnat

        meta pkttype broadcast accept;
        meta pkttype multicast accept;
        meta mark $lo_v2ray_fwmark accept;
        meta mark $skip_vpn_mark counter name nat.skip masquerade comment "nat marked packets"
        ip daddr != $local_network counter name nat.masquerade masquerade comment "nat everything"
    }
}
