cmddir="$HOME/cmd"

detect_distro() {
  if [[ "$OSTYPE" == linux-android* ]]; then
    distro="termux"
  fi

  if [ -z "$distro" ]; then
    distro=$(ls /etc | awk 'match($0, "(.+?)[-_](?:release|version)", groups) {if(groups[1] != "os") {print groups[1]}}')
  fi

  if [ -z "$distro" ]; then
    if [ -f "/etc/os-release" ]; then
      distro="$(source /etc/os-release && echo $ID)"
    elif [ "$OSTYPE" == "darwin" ]; then
      distro="darwin"
    else 
      distro="invalid"
    fi
  fi
}

detect_distro


# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block, everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# agnoster theme, disable printing the user
DEFAULT_USER=$(whoami)
prompt_context(){}

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
#ZSH_THEME="robbyrussell"
ZSH_THEME="agnoster"
#ZSH_THEME="powerlevel10k/powerlevel10k"

powerlevel_theme=false
if $powerlevel_theme; then
    powerlevel10k_theme="/usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme"
    powerlevel9k_theme="/usr/share/powerlevel9k/powerlevel9k.zsh-theme"
    if [ -f "$powerlevel10k_theme" ]; then
            source "$powerlevel10k_theme";
    elif [ -f "$powerlevel9k_theme" ]; then
      source "$powerlevel9k_theme";
    else
            ZSH_THEME="agnoster"
    fi;
fi;

# syntax highlighting for zsh
zsh_highlighting_file="$HOME/.zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
if [ -f "$zsh_highlighting_file" ]; then
  source "$zsh_highlighting_file"
else
  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$HOME/.zsh-syntax-highlighting" --depth 1 && source "$zsh_highlighting_file"
fi;


# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
ZSH_CUSTOM=/usr/share/zsh/

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# plugins=(git archlinux composer docker gem npm perl pip lxd sudo tmux vscode z web-search systemd screen python node catimg command-not-found common-aliases copyfile encode64 extract git-extras httpie history meteor taskwarrior tmuxinator zsh-autosuggestions)
plugins=(systemd git archlinux sudo tmux git-extras history taskwarrior zsh-autosuggestions)
# zsh-autosuggestions

source $ZSH/oh-my-zsh.sh

# Load all of the plugins that were defined in ~/.zshrc
# for plugin ($plugins); do
  # timer=$(($(date +%s%N)/1000000))
  # if [ -f $ZSH_CUSTOM/plugins/$plugin/$plugin.plugin.zsh ]; then
    # source $ZSH_CUSTOM/plugins/$plugin/$plugin.plugin.zsh
  # elif [ -f $ZSH/plugins/$plugin/$plugin.plugin.zsh ]; then
    # source $ZSH/plugins/$plugin/$plugin.plugin.zsh
  # fi
  # now=$(($(date +%s%N)/1000000))
  # elapsed=$(($now-$timer))
  # echo $elapsed":" $plugin
# done


# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"


# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
if $powerlevel_theme; then
    [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
fi;


#export EDITOR="emacsclient -nw -s initd -a nvim"
export EDITOR="nvim"

# JAVA
export JAVA_HOME=/usr/lib/jvm/java-19-openjdk
if [ ! -d "$JAVA_HOME" ]; then
    export JAVA_HOME=/usr/lib/jvm/default
fi

# RUBY
RUBY_PATH=$(ls -1 $HOME/.gem/rubys 2>/dev/null | sort -n | tail -1)
if [ -z "$RUBY_PATH" ]; then
    export PATH=$PATH:$RUBY_PATH/bin
fi

export PATH=.:$HOME/.bin:$cmddir/bin:$PATH:$JAVA_HOME/bin

# will remove the limits and deduplication of the history file (https://github.com/bamos/zsh-history-analysis/blob/master/README.md)
export HISTSIZE=100000000
export SAVEHIST=$HISTSIZE
setopt EXTENDED_HISTORY 


# vim keybindings
set -o vi
bindkey -v
set keymap vi
set editing-mode vi

source $cmddir/shell/aliases
source $cmddir/shell/functions



# pywal: Change the colors based on the wallpaper
use_pywal=false
if $use_pywal and [ -x "$(command -v wal)" ]; then
  # Import colorscheme from 'wal' asynchronously
  # &   # Run the process in the background.
  # ( ) # Hide shell job control messages.
  (cat ~/.cache/wal/sequences &)

  # Alternative (blocks terminal for 0-3ms)
  # cat ~/.cache/wal/sequences

  # To add support for TTYs this line can be optionally added.
  source ~/.cache/wal/colors-tty.sh
fi;


# CPM.cmake's option for caching
# link: https://github.com/cpm-cmake/CPM.cmake#cpm_source_cache
export CPM_SOURCE_CACHE=$HOME/.cache/CPM


if [[ "$distro" == "termux" ]]; then
  # a fix from https://github.com/keybase/keybase-issues/issues/2798
  export GPG_TTY=$(tty);

  # I don't remember why!
  export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/data/data/com.termux/files/usr/lib"
fi;


# Chromium dept_tools
if [ -d /opt/depot_tools ]; then
    export PATH=$PATH:/opt/depot_tools
fi

function precmd {
    if [ "$?" != 0 ]; then
        setsid paplay --volume=65536 /usr/share/sounds/freedesktop/stereo/dialog-error.oga
    else
        setsid paplay --volume=55536 /usr/share/sounds/freedesktop/stereo/dialog-information.oga
    fi;
}

