#!/bin/bash

functions_file_path="$0"

# check the time that it takes the shell to start
time-shell() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do time $shell -i -c exit; done
}

function cd {
  builtin cd "$@" && ls -F && echo && echo && pwd;
}

function en {
  if [ "$#" -eq 0 ]; then
    export LANG="en_US.UTF-8" LANGUAGE="en:en_US"
  else
    LANG="en_US.UTF-8" LANGUAGE="en:en_US" $@
  fi
}

function es {
  if [ "$#" -eq 0 ]; then
    export LANG="es_ES.UTF-8" LANGUAGE="es:en_US"
  else
    LANG="es_ES.UTF-8" LANGUAGE="es:en_US" $@
  fi
}


function zsh-stats() {
    fc -l 1 | sed -E 's/[[:space:]]sudo[[:space:]]/ /' | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl | head -n25;
}

function pause-clion() {
  kill -stop `pidof clang-tidy`
  kill -stop `pidof clangd`
  kill -stop `pidof java`
}

function resume-clion() {
  kill -cont `pidof java`
  kill -cont `pidof clangd`
  kill -cont `pidof clang-tidy`
}

function repo_path {
  repo="."
  until [ "$(realpath "$repo")" = "/.git" -o \
          "$(realpath "$repo")" = "/" -o \
          -d "$repo/.git" \
        ]; do
    repo="../${repo}";
  done;
  repo=$(dirname "$repo");
  echo $repo;
}

function run {

  gitroot=".git";

  until [ "$(realpath "$gitroot")" = "/.git" -o \
          "$(realpath "$gitroot")" = "/" -o \
          -d "$gitroot" \
        ]; do
    gitroot="../${gitroot}";
  done;


  proj_dir="$(realpath "$gitroot/..")";
  build_dir="$proj_dir/build";
  old_dir=$(pwd)
  execfile="$@"

  if [ -d "$gitroot" -a -d "$proj_dir" -a -d "$build_dir" ]; then
    if [ -f "$build_dir/CMakeCache.txt" ]; then
      build_cmd="cmake --build '$build_dir' --target $execfile"
    elif [ -f "$build_dir/build.ninja" ]; then
      build_cmd="ninja -C '$build_dir' -v $execfile"
    elif [ -f "Makefile" ]; then
      build_cmd="make -C '$build_dir' $execfile"
    else
      echo wrong build directory.
      return
    fi;
    clear;
    echo Project root:    $proj_dir
    echo Build Directory: $build_dir
    echo Build command:   $build_cmd
    if eval "unbuffer $build_cmd"; then
      notify-send -t 800 "Compiled Seccessfully.";
      if [ -f "$build_dir/$execfile" ]; then
        execfile="$build_dir/$execfile"
      fi
      if $execfile; then
        notify-send -t 1000 "Tests Passed";
      else
        notify-send -t 1000 "Tests Failed";
      fi;
    else
      notify-send -t 800 "Compilation Failed.";
    fi;
  else
    echo Project Root not found.
  fi;

}

function keep-running {
  repo=$(repo_path);
  git -C "$repo" ls-files -cm | entr -cs "source ${functions_file_path}; run ${1}"
}

function keep-running-head {
  repo=$(repo_path);
  git -C "$repo" ls-files -cm | entr -cs "source ${functions_file_path}; run ${1} | head -${2}"
}


# git push all
function gpush {
  git remote | while read remote; do echo "git push $remote $(git branch --show-current)"; setsid git push $remote $(git branch --show-current); done
}

# try a command until it works.
function try {
  # Stack overflow issue with this command, and also un-cancelable
  # $@ || try $@;
  while ! $@; do
    sleep 1s; # So we can cancel
  done;
}

# Usage: trynot isup facebook.com && nordvpn connect
function trynot {
  while $@; do
    sleep 1s; # So we can cancel
  done;
}

# Get the ip address of the specified domain (only one ip)
function ipof {
    dig +short $1 | grep '^[.0-9]*$' | head -n 1
}

# Check if a device is up or not
# Usage: try isup router && ssh router
function isup {
    ping -w1 -c1 $@ &>/dev/null || ping -w6 -W1 -c3 $@ &>/dev/null
}

function ishttpfiltered {
    curl --no-progress-meter $@ | grep 10.10.34 &>/dev/null
}

function isempty {
    test -z "$@"
}

function isnotempty {
    ! isempty $@
}

function ishttpup {
    (ipof $@ | isnotempty) && (! ishttpfiltered $@)
}

