#!/bin/bash

functions_file_path="$0"

function cd {
  builtin cd "$@" && ls -F && echo && echo && pwd;
}

function en {
  if [ -z "$@" ]; then
    export LANG="en_US.UTF-8" LANGUAGE="en:en_US"
  else
    LANG="en_US.UTF-8" LANGUAGE="en:en_US" $@
  fi
}

function es {
  if [ -z "$@" ]; then
    export LANG="es_ES.UTF-8" LANGUAGE="es:en_US"
  else
    LANG="es_ES.UTF-8" LANGUAGE="es:en_US" $@
  fi
}


function zsh-stats() {
    fc -l 1 | sed -E 's/[[:space:]]sudo[[:space:]]/ /' | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl | head -n25;
}

function pause-clion() {
  kill -stop `pidof clangd`
  kill -stop `pidof java`
}

function resume-clion() {
  kill -cont `pidof java`
  kill -cont `pidof clangd`
}

function repo_path {
  repo="."
  until [ "$(realpath "$repo")" = "/.git" -o \
          "$(realpath "$repo")" = "/" -o \
          -d "$repo/.git" \
        ]; do
    repo="../${repo}";
  done;
  repo=$(dirname "$repo");
  echo $repo;
}

function run {
  clear;
  if ninja -v $@; then
    notify-send -t 800 "Compiled Seccessfully.";
    if ./$@; then
      notify-send -t 1000 "Tests Passed";
    else
      notify-send -t 1000 "Tests Failed";
    fi;
  else
    notify-send -t 800 "Compilation Failed.";
  fi;
}

function keep-running {
  repo=$(repo_path);
  find "$repo" | entr -cs "source ${functions_file_path}; run ${1}"
}


# git push all
function gpush {
  git remote | while read remote; do echo "git push $remote $(git branch --show-current)"; setsid git push $remote $(git branch --show-current); done
}
