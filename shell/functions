#!/bin/bash

functions_file_path="$0"

# time the shell startup
timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do time $shell -i -c exit; done
}

# check the time that it takes the shell to start
time-shell() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do time $shell -i -c exit; done
}

function cd {
  builtin cd "$@" && ls -F && echo && echo && pwd;
}

function en {
  if [ "$#" -eq 0 ]; then
    export LANG="en_US.UTF-8" LANGUAGE="en:en_US"
  else
    LANG="en_US.UTF-8" LANGUAGE="en:en_US" $@
  fi
}

function es {
  if [ "$#" -eq 0 ]; then
    export LANG="es_ES.UTF-8" LANGUAGE="es:en_US"
  else
    LANG="es_ES.UTF-8" LANGUAGE="es:en_US" $@
  fi
}


function zsh-stats() {
    fc -l 1 | sed -E 's/[[:space:]]sudo[[:space:]]/ /' | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl | head -n25;
}

function pause-clion() {
  kill -stop `pidof clang-tidy`
  kill -stop `pidof clangd`
  kill -stop `pidof java`
}

function resume-clion() {
  kill -cont `pidof java`
  kill -cont `pidof clangd`
  kill -cont `pidof clang-tidy`
}

function repo_path {
  repo="."
  until [ "$(realpath "$repo")" = "/.git" -o \
          "$(realpath "$repo")" = "/" -o \
          -d "$repo/.git" \
        ]; do
    repo="../${repo}";
  done;
  repo=$(dirname "$repo");
  echo $repo;
}

# git push all
function gpush {
  git remote | while read remote; do echo "git push $remote $(git branch --show-current)"; setsid git push $remote $(git branch --show-current); done
}

# try a command until it works.
function try {
  # Stack overflow issue with this command, and also un-cancelable
  # $@ || try $@;
  while ! $@; do
    sleep 1s; # So we can cancel
  done;
}

# Usage: trynot isup facebook.com && nordvpn connect
function trynot {
  while $@; do
    sleep 1s; # So we can cancel
  done;
}

# Get the ip address of the specified domain (only one ip)
function ipof {
    dig +short +timeout=3 $1 | grep '^[.0-9]*$' | head -n 1
}

# Check if a device is up or not
# Usage: try isup router && ssh router
function isup {
    ping -w1 -c1 $@ &>/dev/null || ping -w6 -W1 -c3 $@ &>/dev/null
}

function ishttpfiltered {
    # timeout:     3  seconds
    # max timeout: 10 seconds
    res=$(timeout 3s curl --connect-timeout 3 --max-time 10 --no-progress-meter $@ 2>&1);
    if [ "$?" != 0 ]; then
        return 0;
    fi
    echo -n "$res" | grep 10.10.34 &>/dev/null;
}

function ishttpsfiltered {
    # timeout:     3  seconds
    # max timeout: 10 seconds
    res=$(timeout 3s curl --connect-timeout 3 --max-time 10 --no-progress-meter https://$@ 2>&1);
    if [ "$?" != 0 ]; then
        return 0;
    fi
    echo -n "$res" | grep 10.10.34 &>/dev/null;
}

function isempty {
    if test -n "$1"; then
        test -z "$@" && false || true;
    elif test ! -t 0; then
        cat | xargs test -z;
    else
        echo "No input for to check if it's empty or not.";
    fi;
}

function isnotempty {
    if test -n "$1"; then
        test -z "$@" && false || true;
    elif test ! -t 0; then
        # (cat | xargs test -z) && false || true;
        read line || return 1
        test -z "$line" && false || true;
        # (echo "$line"; cat) | eval "$@"
    else
        echo "No input for to check if it's empty or not.";
    fi;
}

function ishttpup {
    # todo: ishttpup IPAddr is not supported
    (ipof $@ | isnotempty) && (! ishttpfiltered $@) || (! ishttpfiltered $@) || false && true
}

function ishttpsup {
    domain="$@"
    if [ -z "$@" ]; then
        domain="youtube.com"
    fi
    (ipof $domain | isnotempty) && (! ishttpsfiltered $domain) || (! ishttpsfiltered $domain) || false && true
}


function reset_proxies {
    export http_proxy=""
    export https_proxy=""
    export all_proxy=""
    export ftp_proxy=""
    export no_proxy=""
    export HTTP_PROXY=""
    export HTTPS_PROXY=""
    export ALL_PROXY=""
    export FTP_PROXY=""
    export NO_PROXY=""
}
